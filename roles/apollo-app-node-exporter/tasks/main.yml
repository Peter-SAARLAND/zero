---
- name: Teardown node-exporter Docker
  docker_stack:
    absent_retries: 5
    absent_retries_interval: 10
    state: absent
    name: node-exporter
  when: ansible_hostname == "manager-0"
      
- name: Assert usage of systemd as an init system
  assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version
  command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  set_fact:
    node_exporter_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Naive assertion of proper listen address
  assert:
    that:
      - "':' in node_exporter_web_listen_address"

- name: Assert collectors are not both disabled and enabled at the same time
  assert:
    that:
      - "item not in node_exporter_enabled_collectors"
  with_items: "{{ node_exporter_disabled_collectors }}"

- block:
    - name: Assert that TLS key and cert path are set
      assert:
        that:
          - "node_exporter_tls_server_config.cert_file is defined"
          - "node_exporter_tls_server_config.key_file is defined"

    - name: Check existence of TLS cert file
      stat:
        path: "{{ node_exporter_tls_server_config.cert_file }}"
      register: __node_exporter_cert_file

    - name: Check existence of TLS key file
      stat:
        path: "{{ node_exporter_tls_server_config.key_file }}"
      register: __node_exporter_key_file

    - name: Assert that TLS key and cert are present
      assert:
        that:
          - "{{ __node_exporter_cert_file.stat.exists }}"
          - "{{ __node_exporter_key_file.stat.exists }}"
  when: node_exporter_tls_server_config | length > 0

- name: Check if node_exporter is installed
  stat:
    path: "{{ _node_exporter_binary_install_dir }}/node_exporter"
  register: __node_exporter_is_installed
  check_mode: false
  tags:
    - node_exporter_install

- name: Gather currently installed node_exporter version (if any)
  command: "{{ _node_exporter_binary_install_dir }}/node_exporter --version"
  args:
    warn: false
  changed_when: false
  register: __node_exporter_current_version_output
  check_mode: false
  when: __node_exporter_is_installed.stat.exists
  tags:
    - node_exporter_install
    - skip_ansible_lint

- block:
    - name: Get checksum list from github
      set_fact:
        _checksums: "{{ lookup('url', 'https://github.com/prometheus/node_exporter/releases/download/v' + node_exporter_version + '/sha256sums.txt', wantlist=True) | list }}"
      run_once: true

    - name: "Get checksum for {{ go_arch }} architecture"
      set_fact:
        node_exporter_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ _checksums }}"
      when:
        - "('linux-' + go_arch + '.tar.gz') in item"
  when: node_exporter_binary_local_dir | length == 0

- name: Create the node_exporter group
  group:
    name: "{{ _node_exporter_system_group }}"
    state: present
    system: true
  when: _node_exporter_system_group != "root"

- name: Create the node_exporter user
  user:
    name: "{{ _node_exporter_system_user }}"
    groups: "{{ _node_exporter_system_group }}"
    append: true
    shell: /usr/sbin/nologin
    system: true
    create_home: false
    home: /
  when: _node_exporter_system_user != "root"

- block:
    - name: Download node_exporter binary to local folder
      become: false
      get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
        checksum: "sha256:{{ node_exporter_checksum }}"
      register: _download_binary
      until: _download_binary is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: Unpack node_exporter binary
      become: false
      unarchive:
        remote_src: True
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp"
        creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}/node_exporter"
      check_mode: false

    - name: Propagate node_exporter binaries
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ go_arch }}/node_exporter"
        dest: "{{ _node_exporter_binary_install_dir }}/node_exporter"
        mode: 0755
        owner: root
        group: root
        remote_src: True
      notify: restart node_exporter
      when: not ansible_check_mode
  when: node_exporter_binary_local_dir | length == 0

- name: Install selinux python packages [RHEL]
  package:
    name:
      - "{{ ( (ansible_facts.distribution_major_version | int) < 8) | ternary('libselinux-python','python3-libselinux') }}"
      - "{{ ( (ansible_facts.distribution_major_version | int) < 8) | ternary('policycoreutils-python','python3-policycoreutils') }}"
    state: present
  register: _install_selinux_packages
  until: _install_selinux_packages is success
  retries: 5
  delay: 2
  when:
    - (ansible_distribution | lower == "redhat") or
      (ansible_distribution | lower == "centos")

- name: Install selinux python packages [Fedora]
  package:
    name:
      - "{{ ( (ansible_facts.distribution_major_version | int) < 29) | ternary('libselinux-python','python3-libselinux') }}"
      - "{{ ( (ansible_facts.distribution_major_version | int) < 29) | ternary('policycoreutils-python','python3-policycoreutils') }}"
    state: present
  register: _install_selinux_packages
  until: _install_selinux_packages is success
  retries: 5
  delay: 2

  when:
    - ansible_distribution | lower == "fedora"

- name: Install selinux python packages [clearlinux]
  package:
    name: sysadmin-basic
    state: present
  register: _install_selinux_packages
  until: _install_selinux_packages is success
  retries: 5
  delay: 2
  when:
    - ansible_distribution | lower == "clearlinux"

- name: Copy the node_exporter systemd service file
  template:
    src: templates/node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: 0644
  notify: restart node_exporter

- block:
    - name: Create node_exporter config directory
      file:
        path: "/etc/node_exporter"
        state: directory
        owner: root
        group: root
        mode: u+rwX,g+rwX,o=rX

    - name: Copy the node_exporter config file
      template:
        src: templates/config.yaml.j2
        dest: /etc/node_exporter/config.yaml
        owner: root
        group: root
        mode: 0644
      notify: restart node_exporter
  when:
    ( node_exporter_tls_server_config | length > 0 ) or
    ( node_exporter_http_server_config | length > 0 ) or
    ( node_exporter_basic_auth_users | length > 0 )

- name: Create textfile collector dir
  file:
    path: "{{ node_exporter_textfile_dir }}"
    state: directory
    owner: "{{ _node_exporter_system_user }}"
    group: "{{ _node_exporter_system_group }}"
    recurse: true
    mode: u+rwX,g+rwX,o=rX
  when: node_exporter_textfile_dir | length > 0

- name: Allow node_exporter port in SELinux on RedHat OS family
  seport:
    ports: "{{ node_exporter_web_listen_address.split(':')[-1] }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_version.full is version_compare('2.4', '>=')
    - ansible_selinux.status == "enabled"