---
# tasks file for zero-core
- name: Setting Hostname
  hostname:
    name: "{{ inventory_hostname }}"
  ignore_errors: true

- name: $node A-Records
  lineinfile: 
    dest=/etc/hosts 
    regexp='.*{{ item }}$' 
    line="{{ hostvars[item]['ansible_'+private_iface]['ipv4']['address'] }} {{ hostvars[item]['ansible_hostname']}}" 
    state=present
  when: hostvars[item]['ansible_'+private_iface]['ipv4']['address'] is defined
  with_items: "{{ groups['all'] }}"

- name: nodes.* A-Record
  lineinfile: 
    dest=/etc/hosts 
    regexp=".*logs.{{ platform_domain }}$" 
    line="{{ hostvars[item]['ansible_'+private_iface]['ipv4']['address'] }} nodes.{{ platform_domain }}" 
    state=present
  when: hostvars[item]['ansible_'+private_iface]['ipv4']['address'] is defined
  with_items: "{{ groups['all'] }}"

- name: zero.nodes A-Record
  lineinfile: 
    dest=/etc/hosts 
    regexp=".*logs.{{ platform_domain }}$" 
    line="{{ hostvars[item]['ansible_'+private_iface]['ipv4']['address'] }} zero.nodes" 
    state=present
  when: hostvars[item]['ansible_'+private_iface]['ipv4']['address'] is defined
  with_items: "{{ groups['all'] }}"

- name: Set up authorized keys for user root
  authorized_key: user=root key="{{ item }}"
  with_file:
    #- "{{ environment_dir }}/.ssh/id_rsa.pub"
    - "{{ ansible_ssh_public_key_file }}"

- name: Set root SSH Pem key
  copy:
    src="{{ ansible_ssh_private_key_file }}"
    dest=/root/id_rsa.pem
    owner=root
    group=root
    mode=0600

- name: Set root SSH Private key
  copy:
    src="{{ ansible_ssh_private_key_file }}"
    dest=/root/.ssh/id_rsa
    owner=root
    group=root
    mode=0600

- name: Set root SSH Public key
  copy:
    src="{{ ansible_ssh_public_key_file }}"
    dest=/root/.ssh/id_rsa.pub
    owner=root
    group=root
    mode=0600
    
- name: Enabling passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

# - name: Remove require tty
#   lineinfile: 
#     regexp: '^(Defaults\s+requiretty)$'
#     line: '# \1'
#     dest: /etc/sudoers 
#     #state: absent
#     backrefs: yes

# https://github.com/locationlabs/ansible-role_kernel-update/blob/master/tasks/set-grub-default_14_04.yml
- name: Fixing IBM Issue 1
  lineinfile:
    path: /boot/grub/menu.lst
    regexp: '# groot=LABEL=cloudimg-rootfs'
    line: '# groot=(hd0)'
    owner: root
    group: root
    mode: '0644'
  when: ibm_enabled|bool
  register: ibm_fix

- name: Fixing IBM Issue 2
  command: update-grub-legacy-ec2
  when: ibm_enabled|bool and ibm_fix.changed

- name: Unlocking apt
  command: apt update
  changed_when: False
  check_mode: no

- name: Installing apt dependencies
  apt:
    name:
      - python3
      - python3-apt
      - python3-pip
      - python3-dev
      - python3-setuptools
      - git
      - curl
      - apache2-utils
      - gcc
      - apt-transport-https
      - ca-certificates
      - sysstat
      - lm-sensors
      - make
      - zsh
      #- fzf
      - ack
      - open-iscsi
      - resolvconf
    state: present
    update_cache: False
  tags:
    - packages

- name: Installing pip dependencies
  pip:
    name:
      - jsondiff
      - pyyaml
      - docker
      - psutil
  tags:
    - packages
    - docker

- name: Copying custom resolver config
  block:
    - name: Copying resolvconf config
      template:
        src: templates/head.j2
        dest: /etc/resolvconf/resolv.conf.d/head
        owner: root
        group: root
        mode: '0644'
      notify: restart resolvconf
  when: appollo_custom_resolvers|length > 0

- name: Installing ZSH
  block:
    - name: Check if .zshrc exists
      stat:
        path: ~/.zshrc
      register: stat_rc_result

    - name: Check if .oh-my-zsh exists
      stat:
        path: ~/.oh-my-zsh
      register: stat_oh_my_zsh_result

    - name: Cloning oh-my-zsh
      git:
        repo=https://github.com/zsh-users/zsh-autosuggestions
        dest=~/.oh-my-zsh
      when: not stat_oh_my_zsh_result.stat.exists

    - name: Cloning zsh-autosuggestions
      git:
        repo=https://github.com/robbyrussell/oh-my-zsh
        dest=~/.oh-my-zsh/plugins/zsh-autosuggestions

    - name: Cloning zsh-completions
      git:
        repo=https://github.com/zsh-users/zsh-completions
        dest=~/.oh-my-zsh/plugins/zsh-completions
    
    - name: Cloning zsh-syntax-highlighting
      git:
        repo=https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest=~/.oh-my-zsh/plugins/zsh-syntax-highlighting

    - name: Cloning fzf-tab-completion
      git:
        repo=https://github.com/lincheney/fzf-tab-completion.git
        dest=~/.oh-my-zsh/plugins/fzf-tab-completion
      
    - name: Create ~/.zshrc
      template:
        src: templates/zshrc.j2
        dest: /root/.zshrc
        group: root
        owner: root
        mode: 0644
  ignore_errors: yes


- name: Installing bashtop
  block:
    - name: Clone bashtop Git repository
      git:
        repo: 'https://github.com/aristocratos/bashtop.git'
        dest: /opt/bashtop
      
    - name: Install bashtop
      command: make install
        chdir=/opt/bashtop
      changed_when: False
  ignore_errors: yes


- name: Installing lazydocker
  block:
    - name: Download lazydocker
      get_url:
        url: "{{ lazydocker_url }}"
        dest: /usr/local/src/lazydocker.tar.gz
        mode: '0440'
    
    - name: Extract lazydocker
      unarchive:
        src: /usr/local/src/lazydocker.tar.gz
        dest: /usr/local/bin/
        remote_src: True
  ignore_errors: yes


- name: Setting up Kernel (Ubuntu)
  block:
    - name: Installing Kernel
      apt:
        name:
          - "linux-image-{{ kernel_update_grub_requested_kernel_version }}"
          - "linux-headers-{{ kernel_update_grub_requested_kernel_version }}"
        state: present
        update_cache: False
      tags:
        - packages

    - name: Pinning packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - "linux-image-{{ kernel_update_grub_requested_kernel_version }}"
        - linux-image-virtual
        - "linux-headers-{{ kernel_update_grub_requested_kernel_version }}"
    
    - name: Getting Kernel Releases in sorted order
      shell: 'cat /boot/grub/grub.cfg | grep menuentry | grep -oP \\d+\\.\\d+\\.\\d+-\\d+-\\w+ | sort -V -r | uniq'
      register: ku_kernel_releases
      check_mode: no
      changed_when: False

    - name: DEBUG | Kernel Releases
      debug: 
        msg: "{{ ku_kernel_releases }}"
        verbosity: 1

    - name: Setting kernel_update_grub_latest_kernel_version to the latest kernel
      set_fact:
        kernel_update_grub_kernel_versions: "{{ ku_kernel_releases.stdout.splitlines() }}"
        kernel_update_grub_latest_kernel_version: "{{ ku_kernel_releases.stdout.splitlines()[0] }}"

    - name: Checking that kernel_update_grub_requested_kernel_version is in the list of available kernels if defined
      fail: msg="kernel_update_grub_requested_kernel_version is not a valid kernel"
      when: kernel_update_grub_requested_kernel_version is defined
        and kernel_update_grub_requested_kernel_version not in kernel_update_grub_kernel_versions

    - name: Getting menuentry_id_option from /boot/grub/grub.cfg for {{ kernel_update_grub_requested_kernel_version }}
      shell: "awk '/\\$menuentry_id_option/ {print $(NF-1) }' /boot/grub/grub.cfg | sed s/\\'//g | grep -v recovery | grep -F {{ kernel_update_grub_requested_kernel_version }}"
      when: kernel_update_grub_requested_kernel_version is defined
      register: ku_set_grub_vars_kernel_id
      check_mode: no
      changed_when: False

    - name: Escaping the kernel_update_grub_requested_kernel_version to assist with generating parent id
      set_fact:
        kernel_update_grub_requested_kernel_version_escaped: "{{ kernel_update_grub_requested_kernel_version|regex_replace('\\.', '\\.') }}"

    - name: Getting the parent menu id for the kernel
      set_fact:
        ku_set_grub_vars_kernel_parent_id: "{{ ku_set_grub_vars_kernel_id.stdout|regex_replace(kernel_update_grub_requested_kernel_version_escaped+'-', '') }}"

    - name: Setting a value for kernel_update_grub_default
      set_fact:
        kernel_update_grub_default: "{{ ku_set_grub_vars_kernel_parent_id }}>{{ ku_set_grub_vars_kernel_id.stdout }}"

    - name: Creating /etc/default/grub.d
      file:
        dest: /etc/default/grub.d
        group: root
        owner: root
        mode: 0755
        state: directory

    - name: Rendering grub default configuration
      template:
        src: grub_default.j2
        dest: "/etc/default/grub.d/{{ kernel_update_config_prefix_grub_default }}-grub-default.cfg"
        group: root
        owner: root
        mode: 0644
      register: ku_render_grub_default_result
      when: kernel_update_grub_default is defined

    - name: Removing grub default configuration if kernel_update_grub_default isn't set
      file:
        dest: "/etc/default/grub.d/{{ kernel_update_config_prefix_grub_default }}-grub-default.cfg"
        state: absent
      register: ku_remove_grub_default_result
      when: kernel_update_grub_default is not defined

    - name: Getting Configuration Status
      set_fact:
        ku_grub_configuration_changed: "{{ ku_render_grub_default_result.changed or ku_remove_grub_default_result.changed }}"

    - name: Updating grub
      command: update-grub
      register: ku_update_grub_result
      when: ku_grub_configuration_changed

    - name: Getting Grub Update Status
      set_fact:
        ku_update_grub_changed: "{{ ku_update_grub_result.changed }}"
  when: kernel_version|bool

- name: Rebooting Nodes
  reboot:
    reboot_timeout: 180
  when: ku_update_grub_changed is defined and ku_update_grub_changed and kernel_version|bool

