---
- name: "Provision {{ app_name }}"
  block:
    - name: "Teardown Docker Stack"
      docker_stack:
        absent_retries: 5
        absent_retries_interval: 10
        state: absent
        name: "{{ app_name }}"

    - name: Create app group
      group:
        name: "{{ app_name }}"
        state: present

    - name: Create app user
      user:
        name: "{{ app_name }}"
        comment: "apollo-app-{{ app_name }}"
        group: "{{ app_name }}"

    - name: Creating app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ app_name }}"
        group: "{{ app_name }}"

    - name: Creating storage directory
      file:
        path: "{{ apollo_data_volumes_dir }}/{{ app_name }}"
        state: directory
        mode: '0755'
        owner: "{{ app_name }}"
        group: "{{ app_name }}"

    - name: Create config directories
      file:
        path: "{{ app_dir }}/{{ config_dir.path }}"
        state: directory
        mode: '{{ config_dir.mode }}'
        owner: "{{ app_name }}"
        group: "{{ app_name }}"
      with_filetree:
        - "files/"
      when: config_dir.state == 'directory'
      loop_control:
        label: "{{ config_dir.path }}"
        loop_var: config_dir

    - name: Copy config files
      copy:
        src: "{{ config_file.src }}"
        dest: "{{ app_dir }}/{{ config_file.path }}"
        mode: "{{ config_file.mode }}"
        owner: "{{ app_name }}"
        group: "{{ app_name }}"
      with_filetree:
        - "files/"
      when: config_file.state == 'file'
      loop_control:
        label: "{{ config_file.path }}"
        loop_var: config_file

    # - name: Provision Grafana
    #   docker_stack:
    #     state: present
    #     name: grafana
    #     prune: yes
    #     with_registry_auth: yes
    #     compose:
    #       - "{{ app_dir }}/docker-compose.yml"
    #   register: grafana_provision

    # - name: "Download {{ app_name }} binary"
    #   become: false
    #   get_url:
    #     url: "https://dl.grafana.com/oss/release/{{ app_name }}-{{ grafana_version }}.linux-amd64.tar.gz"
    #     dest: "/tmp/{{ app_name }}-v{{ grafana_version }}.tar.gz"
    #   register: _download_binary
    #   until: _download_binary is succeeded
    #   retries: 5
    #   delay: 2
    #   check_mode: false

    # - name: "Unpack {{ app_name }} binary"
    #   become: false
    #   unarchive:
    #     remote_src: True
    #     src: "/tmp/{{ app_name }}-v{{ grafana_version }}.tar.gz"
    #     dest: "/tmp"
    #     creates: "/tmp/{{ app_name }}-{{ grafana_version }}/bin/grafana-server"
    #   check_mode: false

    # - name: "Propagate grafana-server binary"
    #   copy:
    #     src: "/tmp/{{ app_name }}-{{ grafana_version }}/bin/grafana-server"
    #     dest: "{{ _grafana_binary_install_dir }}/grafana-server"
    #     mode: 0755
    #     owner: root
    #     group: root
    #     remote_src: True
    #   notify: restart grafana
    #   when: not ansible_check_mode

    # - name: "Propagate grafana-cli binary"
    #   copy:
    #     src: "/tmp/{{ app_name }}-{{ grafana_version }}/bin/grafana-cli"
    #     dest: "{{ _grafana_binary_install_dir }}/grafana-cli"
    #     mode: 0755
    #     owner: root
    #     group: root
    #     remote_src: True
    #   when: not ansible_check_mode

    - block:
      - name: Import Grafana GPG signing key [Debian/Ubuntu]
        apt_key:
          url: "https://packages.grafana.com/gpg.key"
          state: present
          validate_certs: false
        register: _add_apt_key
        until: _add_apt_key is succeeded
        retries: 5
        delay: 2

      - name: Add Grafana repository [Debian/Ubuntu]
        apt_repository:
          repo: deb https://packages.grafana.com/oss/deb stable main
          state: present
          update_cache: true
        register: _update_apt_cache
        until: _update_apt_cache is succeeded
        retries: 5
        delay: 2
      when:
        - ansible_pkg_mgr == "apt"
        - grafana_manage_repo
      environment: "{{ grafana_environment }}"

    - name: Install Grafana
      package:
        name: "{{ grafana_package }}"
        state: "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"
      register: _install_packages
      until: _install_packages is succeeded
      retries: 5
      delay: 2
      notify: restart grafana-server

    - name: Check which plugins are installed
      find:
        file_type: directory
        recurse: false
        paths: "{{ grafana_data_dir }}/plugins"
      register: installed_plugins

    - name: Install plugins
      become: true
      command: "grafana-cli --pluginsDir {{ grafana_data_dir }}/plugins plugins install {{ item }}"
      args:
        creates: "{{ grafana_data_dir }}/plugins/{{ item }}"
      with_items: "{{ grafana_plugins | difference(installed_plugins.files) }}"
      register: _plugin_install
      until: _plugin_install is succeeded
      retries: 5
      delay: 2
      notify:
        - restart grafana-server

    - name: Ensure grafana configuration directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: grafana
      with_items:
        - "/etc/grafana"
        - "/etc/grafana/datasources"
        - "/etc/grafana/provisioning"
        - "/etc/grafana/provisioning/datasources"
        - "/etc/grafana/provisioning/dashboards"
        - "/etc/grafana/provisioning/notifiers"
        - "/etc/grafana/provisioning/plugins"

    - name: "Creating {{ app_name }} config"
      template:
        src: templates/grafana.ini.j2
        dest: "/etc/grafana/grafana.ini"
        owner: root
        group: grafana
        mode: '0640'
      notify: restart grafana-server

    - name: Create grafana directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
        owner: "grafana"
        group: "grafana"
      with_items:
        - "{{ grafana_logs_dir }}"
        - "{{ grafana_data_dir }}"
        - "{{ grafana_data_dir }}/dashboards"
        - "{{ grafana_data_dir }}/plugins"

    - name: Enable and start Grafana systemd unit
      systemd:
        name: grafana-server
        enabled: true
        state: started
        daemon_reload: true

    - name: Create/Update datasources file (provisioning)
      copy:
        dest: "/etc/grafana/provisioning/datasources/apollo.yml"
        content: |
          apiVersion: 1
          deleteDatasources: 
          {{ grafana_datasources | to_nice_yaml }}
          datasources:
          {{ grafana_datasources | to_nice_yaml }}
        backup: false
        owner: root
        group: grafana
        mode: 0640
      notify: restart grafana-server

    - name: Create/Update dashboards file (provisioning)
      block:
        - name: Create/Update dashboards file (provisioning)
          become: true
          copy:
            dest: "/etc/grafana/provisioning/dashboards/apollo.yml"
            content: |
              apiVersion: 1
              providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                options:
                  path: "{{ grafana_data_dir }}/dashboards"
            backup: false
            owner: root
            group: grafana
            mode: 0640
          notify: restart grafana-server

        - name: Register previously copied dashboards
          find:
            paths: "{{ grafana_data_dir }}/dashboards"
            hidden: true
            patterns:
              - "*.json"
          register: _dashboards_present

        - name: Import grafana dashboards
          become: true
          copy:
            src: "{{ item }}"
            dest: "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"
          with_fileglob:
            - "files/dashboards/*.json"
          register: _dashboards_copied
          notify: "provisioned dashboards changed"

        - name: Get dashboard lists
          set_fact:
            _dashboards_present_list: "{{ _dashboards_present | json_query('files[*].path') | default([]) }}"
            _dashboards_copied_list: "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"

        - name: Remove dashboards not present on deployer machine (synchronize)
          become: true
          file:
            path: "{{ item }}"
            state: absent
          with_items: "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}"

    # - name: "Wait for http://{{ app_domain }} to become ready"
    #   uri:
    #     url: "http://{{ app_domain }}/login"
    #     method: GET
    #     status_code: 200
    #     validate_certs: no
    #   register: _result
    #   until: _result.status == 200
    #   retries: "{{ app_healthcheck_retries }}"
    #   delay: "{{ app_healthcheck_delay }}"
    #   when: grafana_provision.changed

        - name: Make sure service is started
          service:
            name: grafana-server
            state: started
            enabled: true
  tags:
    - "app_grafana"
  when: 
    - ansible_hostname == "manager-0"