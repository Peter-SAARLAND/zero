#! /bin/sh
### BEGIN INIT INFO
# Provides:          minio
# Required-Start:    $syslog $network
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Distributed object storage server built for cloud applications and devops.
# Description:       Distributed object storage server built for cloud applications and devops.
### END INIT INFO

{{ ansible_managed | comment }}

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=minio
SERVICEVERBOSE=yes
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
WORKINGDIR=/usr/local/
DAEMON="{{ minio_server_bin }}"
USER="{{ minio_user }}"

# Read configuration variable file if it is present
[ -r "{{ minio_server_envfile }}" ] && . {{ minio_server_envfile }}

# Make sure the MINIO_VOLUMES variable is defined
[ -n "${MINIO_VOLUMES}" ] || log_daemon_msg "Variable MINIO_VOLUMES not set in {{ minio_server_envfile }}"

# Set the DAEMON_ARGS variable
DAEMON_ARGS="server $MINIO_OPTS $MINIO_VOLUMES"

# Specifies the maximum file descriptor number that can be opened by this process
ulimit -n 65536

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	sh -c "USER=$USER start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile \\
			--test --chdir $WORKINGDIR --chuid $USER \\
			--exec $DAEMON -- $DAEMON_ARGS > /dev/null \\
			|| return 1"
	sh -c "USER=$USER start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile \\
			--background --chdir $WORKINGDIR --chuid $USER \\
			--exec $DAEMON -- $DAEMON_ARGS \\
			|| return 2"
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/1/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/1/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
  start)
	[ "$SERVICEVERBOSE" != no ] && log_daemon_msg "Starting" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$SERVICEVERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$SERVICEVERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$SERVICEVERBOSE" != no ] && log_daemon_msg "Stopping" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$SERVICEVERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$SERVICEVERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	log_daemon_msg "Restarting" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
		esac
	;;
  *)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

: