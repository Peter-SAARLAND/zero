---
- name: Ensure hostname set
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname|trim is match('(\d{1,3}\.){3}\d{1,3}')

- name: Ensure hostname is in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }}.+$"
    line: "{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}"

- name: Set SELinux to disabled state
  selinux:
    state: disabled
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: yes

- name: Add br_netfilter to /etc/modules-load.d/
  copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']

- name: Load br_netfilter
  modprobe:
    name: br_netfilter
    state: present
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']

- name: Set bridge-nf-call-iptables (just to be sure)
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: yes
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Add /usr/local/bin to sudo secure_path
  lineinfile:
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: 'visudo -cf %s'
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']


- name: Add SSH keys
  block:
    - name: Set up authorized keys
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: '{{ item }}'
      with_items: "{{ ssh_public_keys }}"
  when: ssh_public_keys is defined and (ssh_public_keys|length>0)

- name: Update firewall
  block:
    - name: Make sure firewall is started
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Check if k3s zone already exists
      command: firewall-cmd --permanent --zone=k3s --list-sources
      register: fw_check
      failed_when: false
      changed_when: false

    - name: Add k3s zone to firewalld and set rules
      command: "firewall-cmd --permanent {{ item }}"
      register: fw_set
      with_items:
        - --new-zone=k3s
        - --zone=k3s --set-target=ACCEPT
        - --zone=k3s --add-source=10.42.0.0/16
        - --zone=k3s --add-interface=cni0
        - --zone=k3s --add-interface=ens160
        - --zone=k3s --add-port=6443/tcp --permanent
        - --zone=k3s --add-port=2379/tcp --permanent
        - --zone=k3s --add-port=2380/tcp --permanent
        - --zone=k3s --add-port=10250/tcp --permanent
        - --zone=k3s --add-port=8472/udp --permanent
      when:
        - fw_check is not skipped
        - fw_check.rc != 0

    - name: Reload firewalld to apply zone rules
      service:
        name: firewalld
        state: reloaded
      when:
        - fw_set.results[0].skipped is not defined
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux']