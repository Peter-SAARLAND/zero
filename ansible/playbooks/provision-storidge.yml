# This fix is needed for Storidge. /etc/iscsi/initiatorname.iscsi needs to contain
# a unique value on each node. Newer Storidge versions take care of this, but
# as a safety-net, we're providing uniqueness ourselves
- hosts: all
  become: true
  remote_user: "{{ deploy_user_name }}"
  gather_facts: no
  tasks:
    - name: Check if iscsi-initiatorname backup exists
      stat:
        path: /etc/iscsi/initiatorname.iscsi.bak
      register: initiatorname_bak
      tags:
        - storidge
    - name: Fix iscsi problem 1
      copy:
        src: /etc/iscsi/initiatorname.iscsi
        dest: /etc/iscsi/initiatorname.iscsi.bak
        remote_src: yes
      when: initiatorname_bak.stat.exists == False 
      tags:
        - storidge
    - name: Fix iscsi problem 2
      shell:
        cmd: /sbin/iscsi-iname
      register: iscsi_iname
      when: initiatorname_bak.stat.exists == False 
    - name: Copy iscsi-iname to file
      copy:
        content: "InitiatorName={{ iscsi_iname.stdout }}"
        dest: /etc/iscsi/initiatorname.iscsi
      when: initiatorname_bak.stat.exists == False 
      tags:
        - storidge

# Install Storidge
- hosts: 
    - manager
    - worker
  remote_user: "{{ deploy_user_name }}"
  become: true
  tasks:
    - name: Check Storidge is installed
      shell: command -v cio >/dev/null 2>&1
      register: cio_installed
      ignore_errors: yes
      tags:
        - storidge

    - name: Check Storidge version
      command: cio version
      register: cio_version
      changed_when: False
      ignore_errors: yes
      when: 'cio_installed.rc == 0'
      tags:
        - storidge

    - name: CIO Version
      debug:
        var: cio_version
      tags:
        - storidge

    - name: Sysctl Tuning
      sysctl:
        name: net.ipv4.tcp_window_scaling
        value: '0'
        state: present
      tags:
        - storidge
  
    - name: Download Storidge Installer
      get_url: 
        url: ftp://download.storidge.com/pub/ce/cio-ce
        dest: /tmp/cio-installer.sh
        mode: 0700
      when: 'cio_installed.rc != 0'
      tags:
        - storidge
      
    # Install Logs can be found in /var/lib/storidge/installed_packages on the nodes
    - name: Install Storidge
      shell: /tmp/cio-installer.sh -r {{ storidge_version }}
      register: cio_installer
      when: 'cio_installed.rc != 0'
      tags:
        - storidge

    - name: Remove Storidge Installer
      file: 
        path: /tmp/cio-installer.sh 
        state: absent
      when: 'cio_installed.rc != 0'
      tags:
        - storidge

    - name: Reboot Node
      reboot:
        reboot_timeout: 180
      when: "'skipped' not in cio_installer"
      tags:
        - storidge

    - name: Wait for Nodes to be fully up
      pause:
        prompt: "Waiting for nodes to become fully available"
        seconds: 180
      when: "'skipped' not in cio_installer"
      tags:
        - storidge

    - name: Check Cluster Init Status
      shell: >
        cio info
      register: cluster_init_status
      tags:
        - storidge

    - name: Report Cluster Init Status
      debug:
        var: cluster_init_status
      tags:
        - storidge

- name: Create Storidge Cluster
  hosts: manager[0]
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  tasks:
    - name: Set private IP
      set_fact:
        private_ip: "{{ ansible_eth1['ipv4']['address'] }}"

    - name: Get Join Token from active Cluster
      shell: >
        cioctl join-token | awk '/cioctl node add/ {print $5}'
      register: jointoken
      tags:
        - storidge

    - name: Create Storidge Cluster
      shell: >
        cioctl create --noportainer --ip {{ private_ip }} | awk '/cioctl join/ {print $4}'
      register: clustertoken
      when: "cluster_init_status and 'Condition: normal' not in cluster_init_status.stdout"
      tags:
        - storidge

    - name: Report Cluster Token
      debug:
        var: clustertoken
      tags:
        - storidge
    
    - name: Report Join Token
      debug:
        var: jointoken
      tags:
        - storidge

- name: Join Storidge Nodes
  hosts: manager[0]
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
    jointoken: "{{ hostvars[groups['manager'][0]]['jointoken'] }}"
    master: "{{ hostvars[groups['manager'][0]]['private_ip'] }}"
  tasks:
    - name: Join Nodes to Storidge Cluster
      #shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout.split('-')[1]) }} --ip {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
      shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout.split('-')[1]) }} --ip {{ hostvars[item]['ansible_eth1']['ipv4']['address'] }}"
      register: result
      when: "'Condition: normal' not in hostvars[item]['cluster_init_status'].stdout and inventory_hostname != hostvars[item]['inventory_hostname']"
      delegate_to: "{{ item }}"
      run_once: true
      with_items: 
        - "{{ groups['worker'] }}"
        - "{{ groups['manager'] }}"
      tags:
        - storidge

    - name: Join Result
      debug:
        var: result
      tags:
        - storidge

- name: Initialize Storidge Cluster
  hosts: manager[0]
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
    jointoken: "{{ hostvars[groups['manager'][0]]['jointoken'] }}"
  tasks:
    - name: cioctl init
      command: "cioctl init {{ clustertoken.stdout.split('-')[1] }}"
      register: clusterinit
      when: "'skipped' not in clustertoken"
      tags:
        - storidge

    - name: Show Cluster Init Output
      debug: var=clusterinit
      tags:
        - storidge

    - name: Cluster Init Status
      shell: >
        cio info
      register: cluster_init_status
      tags:
        - storidge

    - name: Show Cluster Status
      debug: var=cluster_init_status
      tags:
        - storidge