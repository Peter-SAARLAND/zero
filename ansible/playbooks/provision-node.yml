# This section checks if the nodes have been bootstrapped already
# (i.e. has there been a "first run"?)
# If not, the SSH Connection with {{ deploy_user_name }} (the unprivileged "devops" user)
# will fail and Ansible will retry the connection as root
# If yes, the Playbook will be executed as user "devops"
# This removes the need to manually run a "bootstrap" playbook the first time 
# you bring the infrastructure up.
- hosts: all
  gather_facts: no
  tasks:
    - name: Check Provisioning Status
      wait_for_connection:
        connect_timeout: 1
        timeout: 3
      register: connection
      ignore_errors: yes
      vars:
        ansible_ssh_user: "{{ deploy_user_name }}"
    - name: Bootstrap
      debug:
        msg: "Cannot connect as user '{{ deploy_user_name }}'. The node needs to be bootstrapped"
      when: connection.failed
    - name: Change SSH User to root
      set_fact:
        deploy_user_name: root
      when: connection.failed
    - name: Check Bootsrapping Status
      wait_for_connection:
        connect_timeout: 1
        timeout: 3
      register: connection2
      ignore_errors: yes
      vars:
        ansible_ssh_user: root
      when: connection.failed
    - name: Bootstrap
      debug:
        msg: "{% if connection2.failed %}Cannot connect as user 'root'. \
              Bootstrapping failed. Please contact an Administrator\
              {% else %}Starting Bootstrapping{% endif %}"
      when: connection.failed

# Standards
- hosts: all
  become: true
  remote_user: "{{ deploy_user_name }}"
  tasks:
    - name: Set up authorized keys for user root
      authorized_key: user=root key="{{ item }}"
      with_file:
        - ../../.ssh/id_rsa.pub

    - name: Set root SSH keys
      copy:
        src=../../.ssh/id_rsa
        dest=/root/id_rsa.pem
        owner=root
        group=root
        mode=0600

    - name: Enable passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create A record for Node
      cloudflare_dns:
        zone: "{{ base_domain }}"
        record: "{{ ansible_hostname }}.nodes"
        type: A
        solo: yes
        value: "{{ ansible_default_ipv4.address }}"
        account_email: "{{ cf_api_email }}"
        account_api_token: "{{ cf_api_key }}"
      register: record
      tags:
        - dns

    # Here we're overloading the nodes.mbiosphere.com A-Record with the IP of each node.
    # This way we don't need to specify each Swarm Node in the Prometheus Config
    # but can use the same mechanic of discovery that is used by the other exporters.
    # Prometheus simply queries nodes.mbiosphere.com and gets a list of IPs returned
    # which it then scrapes.
    #
    # EXAMPLE
    #
    # $ dig nodes.mbiosphere.com
    #
    # ;; ANSWER SECTION:
    # nodes.mbiosphere.com.	299	IN	A	157.230.122.88
    # nodes.mbiosphere.com.	299	IN	A	157.230.101.99
    # nodes.mbiosphere.com.	299	IN	A	68.183.219.80
    # nodes.mbiosphere.com.	299	IN	A	157.230.101.24
    # nodes.mbiosphere.com.	299	IN	A	157.230.123.216
    # nodes.mbiosphere.com.	299	IN	A	157.230.99.2
    # nodes.mbiosphere.com.	299	IN	A	157.230.109.225
    - name: Create A record for Nodes (Prometheus)
      cloudflare_dns:
        zone: "{{ base_domain }}"
        record: "nodes"
        type: A
        value: "{{ ansible_default_ipv4.address }}"
        account_email: "{{ cf_api_email }}"
        account_api_token: "{{ cf_api_key }}"
      register: record
      tags:
        - dns

- hosts: all
  become: true
  remote_user: "{{ deploy_user_name }}"
  gather_facts: no
  tasks:
    - name: Install apt dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-setuptools
          - git
        state: present
        update_cache: True
      tags:
        - packages
    - name: Install pip dependencies
      pip:
        name:
          - jsondiff
          - pyyaml
          - docker
      tags:
        - packages

# NTP & Localization
# Config in group_vars/all
- hosts: all
  become: true
  remote_user: "{{ deploy_user_name }}"
  gather_facts: no
  roles:
    - geerlingguy.ntp
    - robertdebock.locale
    - geerlingguy.docker
  tasks:
    - name: Add User devops
      user:
        name: devops
        groups: sudo,docker
        state: present
        append: yes
        shell: /bin/bash

    - name: Set up authorized keys for user devops
      authorized_key: user=devops key="{{ item }}"
      with_file:
        - ../../.ssh/id_rsa.pub

    - name: Copy Docker config
      template:
        src: templates/daemon.json.j2
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'
      notify: restart docker

- hosts: all
  become: true
  remote_user: "{{ deploy_user_name }}"
  gather_facts: yes
  handlers:
    - name: restart firewall
      service:
        name: iptables
        state: restarted
    - name: reload systemd
      systemd:
        daemon_reload: yes
  tasks:
    - name: Copy firewall config
      template:
        src: templates/iptables.conf.j2
        dest: /etc/iptables.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart firewall
      tags:
        - firewall
    - name: Copy firewall service
      template:
        src: templates/iptables.service.j2
        dest: /etc/systemd/system/iptables.service
        owner: root
        group: root
        mode: '0644'
      notify: reload systemd
      tags:
        - firewall
    - name: Enable firewall service
      service:
        name: iptables
        enabled: yes
      tags:
        - firewall