# This fix is needed for Storidge. /etc/iscsi/initiatorname.iscsi needs to contain
# a unique value on each node. Newer Storidge versions take care of this, but
# as a safety-net, we're providing uniqueness ourselves
- hosts: 
    - manager
    - worker
  become: True
  tasks:
    - name: Fail if not on Ubuntu
      fail:
        msg: "Storidge can only be installed on Ubuntu"
      when: ansible_distribution != 'Ubuntu'
    - name: Creating storidge_nodes Group
      group_by:
        key: storidge_nodes

    - name: Checking if iscsi-initiatorname backup exists
      stat:
        path: /etc/iscsi/initiatorname.iscsi.bak
      register: initiatorname_bak
      tags:
        - storidge
      when: storidge_fix_iscsi|bool
    - name: Fixing iscsi problem 1
      copy:
        src: /etc/iscsi/initiatorname.iscsi
        dest: /etc/iscsi/initiatorname.iscsi.bak
        remote_src: True
      #when: initiatorname_bak and initiatorname_bak.stat.exists == False and storidge_fix_iscsi|bool
      when: storidge_fix_iscsi|bool
      tags:
        - storidge
    - name: Fixing iscsi problem 2
      shell:
        cmd: /sbin/iscsi-iname
      register: iscsi_iname
      #when: initiatorname_bak.stat.exists == False 
      when: storidge_fix_iscsi|bool
    - name: Copying iscsi-iname to file
      copy:
        content: "InitiatorName={{ iscsi_iname.stdout }}"
        dest: /etc/iscsi/initiatorname.iscsi
      #when: initiatorname_bak and initiatorname_bak.stat.exists == False and storidge_fix_iscsi|bool
      when: storidge_fix_iscsi|bool
      tags:
        - storidge

# Install Storidge
- name: Provisioning Storidge
  hosts: 
    - manager
    - worker
  become: True
  tasks:
    - name: Getting Install Status
      stat:
        path: /usr/bin/cio
      register: cio_installed
      changed_when: False
      tags:
        - storidge

    - name: DEBUG | Install Status
      debug:
        msg: "Storidge is already installed"
        verbosity: 1
      when: cio_installed.stat is succeeded and cio_installed.stat.exists

    - name: Getting Storidge version
      command: cio version
      register: cio_version
      changed_when: False
      when: cio_installed.stat is succeeded and cio_installed.stat.exists
      tags:
        - storidge

    - name: DEBUG | CIO Version
      debug:
        msg: "Storidge Version: {{  cio_version.stdout.split('-')[1] | lower }}"
        verbosity: 1
      tags:
        - storidge
      when: cio_installed.stat is succeeded and cio_installed.stat.exists

    - name: Sysctl Tuning
      sysctl:
        name: net.ipv4.tcp_window_scaling
        value: '0'
        state: present
      tags:
        - storidge
  
    - name: Downloading Storidge Installer
      get_url: 
        url: ftp://download.storidge.com/pub/ce/cio-ce
        dest: /tmp/cio-installer.sh
        mode: 0700
      when: cio_installed.stat is succeeded and not cio_installed.stat.exists
      tags:
        - storidge
      
    # Install Logs can be found in /var/lib/storidge/installed_packages on the nodes
    - name: Installing Storidge
      shell: /tmp/cio-installer.sh -r {{ storidge_install_version }}
      register: cio_installation
      when: cio_installed.stat is succeeded and not cio_installed.stat.exists
      async: 1000
      poll: 0
      tags:
        - storidge

    - name: Checking Installation Status
      async_status:
        jid: "{{ cio_installation.ansible_job_id }}"
      register: cio_installer
      until: cio_installer.finished
      when: cio_installed.stat is succeeded and not cio_installed.stat.exists
      retries: 60
      delay: 10

    - name: Removing Storidge Installer
      file: 
        path: /tmp/cio-installer.sh 
        state: absent
      when: cio_installed.stat is succeeded and not cio_installed.stat.exists
      tags:
        - storidge

    - name: Rebooting Nodes
      reboot:
        reboot_timeout: 180
      when: "'skipped' not in cio_installer"
      tags:
        - storidge

    - name: Waiting for Nodes to be fully up
      pause:
        prompt: "Waiting for nodes to become fully available"
        seconds: 180
      when: "'skipped' not in cio_installer"
      tags:
        - storidge

    - name: Copying Storidge "Snapshot" Profile
      template:
        src: templates/storidge-profile-snapshot.j2
        dest: /etc/storidge/profiles/SNAPSHOT
        owner: root
        group: root
        mode: '0644'
      register: storidge_profile
      when: storidge_enabled|bool

    - name: Loading Storidge "Snapshot" Profile
      command: cio profile add /etc/storidge/profiles/SNAPSHOT
      register: cio_profile
      when: storidge_profile is defined and storidge_profile.changed

- name: Preparing Storidge Cluster
  hosts: manager[0]
  become: True
  gather_facts: False
  tasks:
    - name: Setting private IP
      set_fact:
        private_ip: "{{ hostvars[inventory_hostname]['ansible_'+private_iface]['ipv4']['address'] }}"

    - name: Getting Cluster Status
      shell: >
        cio info
      register: cluster_init_status
      tags:
        - storidge
      changed_when: False
  
    - name: DEBUG | Cluster Status
      debug:
        var: cluster_init_status
        verbosity: 1
      tags:
        - storidge

    - name: Getting Join Token from active Cluster
      shell: >
        cioctl join-token | awk '/cioctl node add/ {print $5}'
      register: jointoken
      changed_when: False
      tags:
        - storidge

    - name: Creating Storidge Cluster
      shell: >
        cioctl create --noportainer --ip {{ private_ip }} | awk '/cioctl join/ {print $4}'
      register: clustertoken
      when: "cluster_init_status and 'Condition: normal' not in cluster_init_status.stdout"
      tags:
        - storidge

    - name: DEBUG | Cluster Token
      debug:
        var: clustertoken
        verbosity: 1
      tags:
        - storidge
    
    - name: DEBUG | Join Token
      debug:
        var: jointoken
        verbosity: 1
      tags:
        - storidge

- name: Building Storidge Cluster
  hosts: manager[0]
  become: True
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
    jointoken: "{{ hostvars[groups['manager'][0]]['jointoken'] }}"
    master: "{{ hostvars[groups['manager'][0]]['ansible_'+private_iface]['ipv4']['address'] }}"
  tasks:
    - name: Joining Nodes to Storidge Cluster
      #shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout.split('-')[1]) }} --ip {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
      shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout.split('-')[1]) }} --ip {{ hostvars[item]['ansible_'+private_iface]['ipv4']['address'] }}"
      #shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout.split('-')[1]) }} --ip {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
      register: result
      when: "'Condition: normal' not in cluster_init_status.stdout and inventory_hostname != hostvars[item]['inventory_hostname']"
      delegate_to: "{{ item }}"
      retries: 6
      delay: 10
      until: result is succeeded
      run_once: True
      with_items: 
        #- "{{ groups['worker'] }}"
        - "{{ groups['manager'] }}"
      tags:
        - storidge

    - name: DEBUG | Join Result
      debug:
        msg: "{{ result.stdout }}"
        verbosity: 1
      tags:
        - storidge
      when: "result.changed and inventory_hostname != hostvars[groups['manager'][0]]['inventory_hostname']"

- name: Initializing Storidge Cluster
  hosts: manager[0]
  become: True
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
    jointoken: "{{ hostvars[groups['manager'][0]]['jointoken'] }}"
  tasks:
    - name: Running cioctl init
      command: "cioctl init {{ clustertoken.stdout.split('-')[1] }}"
      register: clusterinit
      when: "'skipped' not in clustertoken"
      retries: 3
      delay: 10
      until: clusterinit is succeeded
      tags:
        - storidge

    - name: DEBUG | Cluster Init Output
      debug: 
        var: clusterinit
        verbosity: 1
      run_once: True
      tags:
        - storidge

    - name: Getting Cluster Status
      shell: >
        cio info
      register: cluster_init_status
      changed_when: false
      tags:
        - storidge

    - name: DEBUG | Cluster Status
      debug: 
        var: cluster_init_status
        verbosity: 1
      run_once: True
      tags:
        - storidge

- name: Enabling K8s Storidge Driver
  hosts: manager[0]
  become: True
  tasks:
    - name: Enable K8s Storidge Driver
      command: kubectl create -f https://raw.githubusercontent.com/Storidge/csi-cio/master/deploy/releases/csi-cio-v1.3.0.yaml
      register: storige_k8s_driver
      when: kubernetes_enabled|bool
      
# Upgrade Storidge
- hosts: manager[0]
  become: True
  tasks:    
    - name: Getting Storidge Nodes
      command: cio node list
      register: cio_nodes
      changed_when: False
      tags:
        - storidge

    - name: DEBUG | Storidge Nodes
      debug:
        var: cio_nodes
        verbosity: 1
      tags:
        - storidge

    - name: Getting Storidge Node Info
      set_fact:
        storidge_ip: "{{ item.split()[1] }}"
        storidge_node_id: "{{ item.split()[2] }}"
        storidge_role: "{{ item.split()[3] }}"
        storidge_status: "{{ item.split()[4] }}"
        storidge_version: "{{ item.split()[5] }}"
      delegate_to: "{{ item.split()[0] }}"
      delegate_facts: yes
      with_items: "{{ cio_nodes.stdout_lines }}"

# Upgrade Storidge
- hosts: storidge_nodes
  become: True
  tasks:
    - name: DEBUG | Storidge Node Info
      debug:
        msg: 
          - "Storidge Node ID: {{ storidge_node_id }}"
          - "Storidge Node IP: {{ storidge_ip }}"
          - "Storidge Node Role: {{ storidge_role }}"
          - "Storidge Node Status: {{ storidge_status }}"
          - "Storidge Node Version: {{ storidge_version.split('-')[1] }}"
          - "Storidge Install Version: {{ storidge_install_version }}"
        verbosity: 1
      changed_when: storidge_install_version|int != storidge_version.split('-')[1]|int
      tags:
        - storidge

    - name: Checking Storidge Upgrade Status
      set_fact: 
        storidge_upgradable: yes
      when: storidge_install_version|int > storidge_version.split('-')[1]|int

    - name: Creating storidge_role_* Group
      group_by:
        key: storidge_role_{{ storidge_role }}

    - name: DEBUG | storidge_role_* Group Members
      debug:
        var: "groups['storidge_role_{{ storidge_role }}']"

    - name: Creating storidge_status_* Group
      group_by:
        key: storidge_status_{{ storidge_status }}

    - name: DEBUG | storidge_status_* Group Members
      debug:
        var: "groups['storidge_status_{{ storidge_status }}']"

# Upgrade Storidge
- hosts: localhost
  serial: 1
  tasks:
    - name: Counting Storidge Nodes
      set_fact:
        storidge_node_count: "{{ groups['storidge_nodes']|length }}"

    - name: Counting Storidge Nodes with status "normal"
      set_fact:
        storidge_normal_count: "{{ groups['storidge_status_normal']|length }}"

    - name: "ATTENTION: Status Check failed"
      fail: 
        msg: "WARNING! Not all Nodes are in status 'normal'"
      when: storidge_node_count != storidge_normal_count

# Upgrade Storidge
# Start with Nodes of Role "storage"
- hosts: 
    - storidge_role_storage
    - storidge_role_backup2
    - storidge_role_backup1
    - storidge_role_sds
  serial: 1
  ignore_unreachable: True
  ignore_errors: true
  tasks:
    - name: Upgrade Storidge Node
      block:
        - name: "INFO | Current Node"
          debug:
            msg: "Going to Update Storidge on {{  ansible_hostname  }} from {{ storidge_version.split('-')[1] }} to {{ storidge_install_version }}"
          when: storidge_upgradable is defined and storidge_upgradable

        - name: "FAIL | Node Status Check Failed"
          fail: 
            msg: "WARNING! Node is not in status 'normal'"
          when: storidge_status != "normal"

        - name: Starting Update
          command: "cioctl node update" #  --no-reboot
          register: storidge_update 
          async: 1000
          poll: 0
          when: storidge_upgradable is defined and storidge_upgradable and storidge_status == "normal"
          #failed_when: 

        - name: Checking Update Status
          async_status:
            jid: "{{ storidge_update.ansible_job_id }}"
          register: update_result
          until: update_result.finished
          when: storidge_upgradable is defined and storidge_upgradable and storidge_status == "normal"
          retries: 300

        - name: Rebooting Nodes
          reboot:
            reboot_timeout: 180
          when: storidge_upgradable is defined and storidge_upgradable and update_result.finished
          tags:
            - storidge

        - name: Clearing Node Failure Status
          meta: clear_host_errors

        - name: Waiting for Node to come back after reboot
          wait_for_connection:
            delay: 60
            timeout: 300
          when: storidge_upgradable is defined and storidge_upgradable

        - name: Waiting for node to become uncordoned
          shell: "cio node list | grep {{ ansible_hostname }}"
          register: storidge_current_status
          retries: 12
          delay: 10
          until: storidge_current_status.stdout.split()[4] == "normal"
          when: storidge_upgradable is defined and storidge_upgradable
          tags:
            - storidge

        - name: DEBUG | Node List
          debug:
            var: storidge_current_status
            verbosity: 1
          when: storidge_upgradable is defined and storidge_upgradable
          tags:
            - storidge

        - name: Getting Storidge Nodes
          command: cio node list
          register: cio_nodes
          retries: 12
          delay: 10
          until: cio_nodes is succeeded
          changed_when: False
          delegate_to: "{{ groups['manager'][0] }}"
          when: storidge_upgradable is defined and storidge_upgradable
          tags:
            - storidge
    
        - name: DEBUG | Storidge Nodes
          debug:
            var: cio_nodes
            verbosity: 1
          when: storidge_upgradable is defined and storidge_upgradable
          tags:
            - storidge
    
        - name: Getting Storidge Node Info
          set_fact:
            storidge_ip: "{{ item.split()[1] }}"
            storidge_node_id: "{{ item.split()[2] }}"
            storidge_role: "{{ item.split()[3] }}"
            storidge_status: "{{ item.split()[4] }}"
            storidge_version: "{{ item.split()[5] }}"
          delegate_to: "{{ item.split()[0] }}"
          delegate_facts: yes
          when: storidge_upgradable is defined and storidge_upgradable
          with_items: "{{ cio_nodes.stdout_lines }}"
      rescue:
      - debug:
          msg: 'I caught an error, can do stuff here to fix it, :-)'