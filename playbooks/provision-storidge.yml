# Install Storidge
- hosts: swarm
  remote_user: "{{ deploy_user_name }}"
  become: true
  tasks:
    # - name: Recursively remove directory
    #   file:
    #     path: /opt/storidge
    #     state: absent
    - name: Download Storidge
      get_url:
        # /u18 is for Ubuntu 18.04
        url: ftp://download.storidge.com/pub/ce/u18/cio-{{ storidge_version }}-u18-ce.amd64.txz
        dest: /tmp/cio-{{ storidge_version }}-u18-ce.amd64.txz
        mode: '0775'

    - name: Extract Storidge
      unarchive:
        src: /tmp/cio-{{ storidge_version }}-u18-ce.amd64.txz
        dest: /usr/src
        remote_src: yes
        creates: /usr/src/cio-{{ storidge_version }}-u18.amd64
    
    - name: Symlink Storidge to /opt/storidge
      file:
        src: /usr/src/cio-{{ storidge_version }}-u18.amd64
        dest: /opt/storidge
        owner: root
        group: root
        state: link

    - name: Check Storidge is installed
      shell: command -v cio >/dev/null 2>&1
      register: cio_installed
      ignore_errors: yes

    - name: Check Storidge version
      command: cio version
      register: cio_version
      changed_when: False
      ignore_errors: yes
      when: 'cio_installed.rc == 0'

    - name: CIO Version
      debug:
        var: cio_version

    - name: Install Storidge
      command: chdir=/opt/storidge ./install
      when: 'cio_installed.rc != 0'
      #when: "cio_version.stdout.find('v=' ~ storidge_version) == -1"

- hosts: localhost
  connection: local
  gather_facts: False
  user: root
  tasks:
    - name: Restart Managers
      hcloud_server:
        api_token: "{{ hcloud_token }}"
        name: "{{ item.name }}"
        state: restarted
      with_items: "{{ nodes.manager }}"
      when: 'cio_installed.rc != 0'
    - name: Restart Workers
      hcloud_server:
        api_token: "{{ hcloud_token }}"
        name: "{{ item.name }}"
        state: restarted
      with_items: "{{ nodes.worker }}"
      when: 'cio_installed.rc != 0'
    - name: Wait for Hosts to be up
      pause:
        prompt: "Waiting for servers to become fully available"
        seconds: 180
      when: 'cio_installed.rc != 0'

- name: Create Storidge Cluster
  hosts: manager[0]
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  tasks:
    - name: Set private ip
      set_fact:
        private_ip: "{{ ansible_default_ipv4.address }}"
    - name: get join token from active cluster
      shell: >
        cioctl join-token | awk '/cioctl node add/ {print $5}'
      register: jointoken

    - name: create cluster
      shell: >
        cioctl create --ip {{ private_ip }} | awk '/cioctl join/ {print $4}'
      register: clustertoken
      when: "jointoken.stdout == ''"

- name: Join Storidge Nodes
  hosts: swarm
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
    jointoken: "{{ hostvars[groups['manager'][0]]['jointoken'] }}"
    master: "{{ hostvars[groups['manager'][0]]['private_ip'] }}"
  tasks:
    - name: check if already a cluster member
      stat:
        path: /etc/storidge/nodeid
      register: nodeid

    - name: join nodes to cio cluster
      shell: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout) }} --ip {{ ansible_default_ipv4.address }}"
      args:
        creates: "/etc/storidge/nodeid"
      #changed_when: result.rc != 1
      #failed_when: verification.rc not in [0,1]
      async: 1000
      poll: 0
      register: result
      #retries: 5
      #delay: 180
      when: not nodeid.stat.exists

    - name: Install Result
      debug:
        var: result

    - name: check join status
      async_status:
        jid: "{{ result.ansible_job_id }}"
      until: check_result.finished
      register: check_result
      retries: 1000
      #until: result.stdout.find("Starting API") != -1
      #retries: 5
      #delay: 180
      when: "'skipped' not in result"

    - name: Install Result
      debug:
        var: check_result

- name: Initialize Storidge Cluster
  hosts: manager[0]
  remote_user: "{{ deploy_user_name }}"
  become: true
  gather_facts: False
  vars:
    clustertoken: "{{ hostvars[groups['manager'][0]]['clustertoken'] }}"
  tasks:
    - name: cioctl init
      command: "cioctl init {{ clustertoken.stdout.split('-')[1] }}"
      register: clusterinit
      when: "clustertoken is not skipped"

    - name: show cluster init output
      debug: var=clusterinit.stdout

    - name: show cluster init error
      debug: var=clusterinit.stderr