---
- name: Remove wireguard ppa (Ubuntu)
  apt_repository:
    repo: 'ppa:wireguard/wireguard'
    state: absent
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int < 20
    
- name: Create apollo group
  group:
    name: apollo
    state: present

- name: Create apollo user
  user:
    name: "apollo"
    comment: "apollo@{{ arc['space']['name'] }}"
    group: apollo
    home: "{{ apollo_remote_dir }}"
    append: yes
    groups: sudo
    password: "{{ arc['auth']['admin_password'] | password_hash('sha512', arc['auth']['admin_password'] ) }}"
    shell: "/bin/bash"

- name: Change shell for root
  user:
    name: "root"
    shell: /bin/bash

- name: Copy bashrc
  template:
    src: "bashrc.j2"
    dest: "/root/.bashrc"
    owner: root
    group: root
    mode: 0755

- name: Creating apollo directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0775'
    owner: "apollo"
    group: "apollo"
  with_items:
    - "{{ apollo_remote_dir }}"
    - "{{ apollo_remote_dir }}/.ssh"
    - "{{ apollo_app_dir }}"
    - "{{ apollo_downloads_dir }}"
    - "{{ arc['data']['volumes_dir'] }}"

- name: Setting Hostname
  hostname:
    name: "{{ inventory_hostname }}"
  ignore_errors: true

- name: Setting apollo environment
  template:
    src: "apollo_env.sh.j2"
    dest: "/etc/profile.d/apollo_env.sh"
    mode: 0755

# - name: Set root SSH Pem key
#   copy:
#     src="{{ ansible_ssh_private_key_file }}"
#     dest=/root/id_rsa.pem
#     owner=root
#     group=root
#     mode=0600
    
- name: Enabling passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Unlocking apt
  command: apt update
  changed_when: False
  check_mode: no

- name: Installing apt dependencies
  apt:
    name:
      - python3
      - python3-apt
      - python3-pip
      - python3-dev
      - python3-setuptools
      - git
      - curl
      - apache2-utils
      - gcc
      - apt-transport-https
      - ca-certificates
      - sysstat
      - lm-sensors
      - make
      - zsh
      - adduser
      - libfontconfig
      - open-iscsi
      - resolvconf
      - unzip
      - gnupg2
      #- cockpit
      #- cockpit-ws
      #- cockpit-dashboard
      #- cockpit-storaged
      - fail2ban
      - moreutils
      - postfix
      - mosh
    state: present
    update_cache: False

- name: Installing pip dependencies
  pip:
    name:
      - jsondiff
      - pyyaml
      - docker
      - psutil
      - jmespath
      - python-dotenv
      - docker-compose

- name: Provision Postfix
  block:
    - name: Update Postfix configuration.
      lineinfile:
        dest: "{{ postfix_config_file }}"
        line: "{{ item.name }} = {{ item.value }}"
        regexp: "^{{ item.name }} ="
        mode: 0644
      with_items:
        - name: inet_interfaces
          value: "all"
        - name: inet_protocols
          value: "{{ postfix_inet_protocols }}"
        - name: myorigin
          value: "{{ arc['space']['space_domain'] }}"
        - name: myhostname
          value: "{{ arc['space']['space_domain'] }}"
        - name: mydomain
          value: "{{ arc['space']['space_domain'] }}"
        - name: mynetworks_style
          value: "host"
        - name: mynetworks
          value: 10.0.0.0/8
        - name: mydestination
          value: ""
      notify: restart postfix

    - name: Ensure postfix is started and enabled at boot.
      service:
        name: postfix
        state: "{{ postfix_service_state }}"
        enabled: "{{ postfix_service_enabled }}"
  when: ansible_hostname == "manager-0"

- name: handling DNS
  block:
    # - name:
    #   digital_ocean_domain:
    #     state: present
    #     name: "{{ arc['space']['space_domain'] }}"
    #     ip: "{{ apollo_management_ip }}"
    #     oauth_token: "{{ arc['providers']['digitalocean']['token'] }}"
    - uri:
        url: "https://api.digitalocean.com/v2/domains/{{ arc['space']['base_domain'] }}/records"
        headers:
          accept: application/json
          authorization: "Bearer {{ arc['providers']['digitalocean']['auth']['token'] }}"
        return_content: yes
      register: domain_records_resp

    - debug:
        msg: "{{ domain_records_resp }}"
  
    - when: "arc['space']['name'] not in (domain_records_resp.json.domain_records | map(attribute='name') | list)"
      uri:
        method: POST
        url: "https://api.digitalocean.com/v2/domains/{{ arc['space']['base_domain'] }}/records"
        headers:
          authorization: "Bearer {{ arc['providers']['digitalocean']['auth']['token'] }}"
        body: '{{ create_record | to_json }}'
        status_code: [200, 201]
        body_format: json
        return_content: yes
      vars:
        create_record:
            data: "{{ apollo_management_ip }}"
            flags: null
            name: "{{ arc['space']['name'] }}"
            port: null
            priority: null
            tag: null
            ttl: 1800
            type: A
            weight: null

    - when: '(["*",arc["space"]["name"]] | join(".")) not in (domain_records_resp.json.domain_records | map(attribute="name") | list)'
      uri:
        method: POST
        url: "https://api.digitalocean.com/v2/domains/{{ arc['space']['base_domain'] }}/records"
        headers:
          authorization: "Bearer {{ arc['providers']['digitalocean']['auth']['token'] }}"
        body: '{{ create_record | to_json }}'
        status_code: [200, 201]
        body_format: json
        return_content: yes
      vars:
        create_record:
            data: "{{ apollo_management_ip }}"
            flags: null
            name: "*.{{Â arc['space']['name'] }}"
            port: null
            priority: null
            tag: null
            ttl: 1800
            type: A
            weight: null    
  when:
    - arc['dns']['enabled']|bool
    - arc['dns']['provider'] == "digitalocean"
    - ansible_hostname == "manager-0"