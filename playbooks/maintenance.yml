- hosts: all:!manager[0]
  become: True
  serial: 1
  tasks:
    - name: Hostname
      debug:
        msg: "{{ ansible_hostname }}"
      tags:
        - upgrade
        - drain

    - name: Fix IBM Issue 1
      lineinfile:
        path: /boot/grub/menu.lst
        regexp: '# groot=LABEL=cloudimg-rootfs'
        line: '# groot=(hd0)'
        owner: root
        group: root
        mode: '0644'
      when: ibm_cloud_enabled|bool
      register: ibm_fix

    - name: Fix IBM Issue 2
      command: update-grub-legacy-ec2
      when: ibm_cloud_enabled|bool and ibm_fix.changed

    - name: Docker Info
      command: docker info
      register: docker_info
      changed_when: False
      tags:
        - upgrade
        - drain

    - name: Check for upgradeable
      become: True
      apt:
        upgrade: True
      check_mode: True
      register: upgradeable
      tags:
        - upgrade

    - name: Show me
      debug:
        msg: "{{ upgradeable }}"
        verbosity: 1
      tags:
        - upgrade

    - name: Check Storidge Installation Status
      shell: command -v cio >/dev/null 2>&1
      register: cio_installed
      ignore_errors: True
      tags:
        - upgrade
        - drain

    - name: Drain CIO Node
      shell: cioctl node cordon '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: drain_status
      when: upgradeable.changed and cio_installed.rc == 0
      #when: cio_installed.rc == 0
      tags:
        - upgrade
        - drain

    - name: Drain Swarm Node
      shell: docker node update --availability drain '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: drain_status
      when: upgradeable.changed and cio_installed.rc != 0
      tags:
        - upgrade
        - drain

    - name: Wait for Drain to finish
      pause: 
        prompt: "Make sure Drain operation finishes"
        seconds: 30
      when: upgradeable.changed
      tags:
        - drain

    - name: Upgrade Swarm Node
      apt:
        update_cache: True
        upgrade: dist
        autoremove: True
      #when: "'drain_status' in hostvars[inventory_hostname] and hostvars[inventory_hostname]['drain_status'].rc == 0"
      when: drain_status is succeeded
      register: upgrade
      tags:
        - upgrade

    - name: Restart Docker
      service:
        name: docker
        state: restarted
      when: drain_status is succeeded and upgrade is succeeded and upgradeable.changed
      tags:
        - upgrade
        - restart_docker

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      when: drain_status is succeeded and upgrade is succeeded
      tags:
        - upgrade

    - name: Reboot Prompt
      pause:
        prompt: "Press ENTER to reboot {{ inventory_hostname }} now, or Ctrl+C to abort."
      # We need to check for the existence of 'reboot_required_file' first because play_hosts also
      # include hosts that have failed. When a host has failed, it stops executing and thus doesn't
      # have 'reboot_required_file'. And if we try to access 'stat', boom! failure. We don't want that.
      when: "'reboot_required' in hostvars[inventory_hostname] and hostvars[inventory_hostname]['reboot_required'].stat.exists"
      tags:
        - upgrade

    - name: Rebooting Swarm Node
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: True
      when: reboot_required.stat.exists and drain_status is succeeded and upgrade is succeeded
      tags:
        - upgrade

    - name: Waiting for Swarm Node to come back
      local_action: wait_for host={{ ansible_host }} state=started port=22 delay=30
      become: False
      when: reboot_required.stat.exists and drain_status is succeeded and upgrade is succeeded
      register: reconnect
      tags:
        - upgrade

    - name: Wait before Restoration
      pause: 
        prompt: "Make sure Restoration operation finishes"
        seconds: 15
      when: reconnect.changed
      tags:
        - drain

    - name: Activate CIO Node
      shell: cioctl node uncordon '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      when: drain_status.changed and cio_installed.rc == 0
      register: activate_status
      tags:
        - upgrade
        - drain

    - name: Activate Swarm Node
      shell: docker node update --availability active '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: activate_status
      when: drain_status.changed and cio_installed.rc != 0
      tags:
        - upgrade
        - drain

    - name: Wait for Restore to finish
      pause: 
        prompt: "Make sure Restore operation finishes"
        seconds: 30
      when: drain_status.changed
      tags:
        - drain
    
    # - name: Reboot if kernel/libs was updated
    #   shell: sleep 10 && /sbin/shutdown -r now 'Rebooting box to update system libs/kernel as needed' 
    #   args:
    #       removes: /var/run/reboot-required
    #   async: 300
    #   poll: 0
    #   ignore_errors: True

- hosts: manager[0]
  become: True
  serial: 1
  tasks:
    - name: Hostname
      debug:
        msg: "{{ ansible_hostname }}"
      tags:
        - upgrade
        - drain

    - name: Fix IBM Issue 1
      lineinfile:
        path: /boot/grub/menu.lst
        regexp: '# groot=LABEL=cloudimg-rootfs'
        line: '# groot=(hd0)'
        owner: root
        group: root
        mode: '0644'
      when: ibm_cloud_enabled|bool
      register: ibm_fix

    - name: Fix IBM Issue 2
      command: update-grub-legacy-ec2
      when: ibm_cloud_enabled|bool and ibm_fix.changed

    - name: Docker Info
      command: docker info
      register: docker_info
      changed_when: False
      tags:
        - upgrade
        - drain

    - name: Check for upgradeable
      become: True
      apt:
        upgrade: True
      check_mode: True
      register: upgradeable
      tags:
        - upgrade

    - name: Show me
      debug:
        msg: "{{ upgradeable }}"
        verbosity: 1
      tags:
        - upgrade

    - name: Check Storidge Installation Status
      shell: command -v cio >/dev/null 2>&1
      register: cio_installed
      ignore_errors: True
      tags:
        - upgrade
        - drain

    - name: Drain CIO Node
      shell: cioctl node cordon '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: drain_status
      when: upgradeable.changed and cio_installed.rc == 0
      #when: cio_installed.rc == 0
      tags:
        - upgrade
        - drain

    - name: Drain Swarm Node
      shell: docker node update --availability drain '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: drain_status
      when: upgradeable.changed and cio_installed.rc != 0
      tags:
        - upgrade
        - drain

    - name: Wait for Drain to finish
      pause: 
        prompt: "Make sure Drain operation finishes"
        seconds: 30
      when: upgradeable.changed
      tags:
        - drain

    - name: Upgrade Swarm Node
      apt:
        update_cache: True
        upgrade: safe
        autoremove: True
        autoclean: True
      #when: "'drain_status' in hostvars[inventory_hostname] and hostvars[inventory_hostname]['drain_status'].rc == 0"
      when: drain_status is succeeded
      register: upgrade
      tags:
        - upgrade

    - name: Restart Docker
      service:
        name: docker
        state: restarted
      when: drain_status is succeeded and upgrade is succeeded and upgradeable.changed
      tags:
        - upgrade
        - restart_docker

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      when: drain_status is succeeded and upgrade is succeeded
      tags:
        - upgrade

    - name: Reboot Prompt
      pause:
        prompt: "Press ENTER to reboot {{ inventory_hostname }} now, or Ctrl+C to abort."
      # We need to check for the existence of 'reboot_required_file' first because play_hosts also
      # include hosts that have failed. When a host has failed, it stops executing and thus doesn't
      # have 'reboot_required_file'. And if we try to access 'stat', boom! failure. We don't want that.
      when: "'reboot_required' in hostvars[inventory_hostname] and hostvars[inventory_hostname]['reboot_required'].stat.exists"
      tags:
        - upgrade

    - name: Rebooting Swarm Node
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: True
      when: reboot_required.stat.exists and drain_status is succeeded and upgrade is succeeded
      tags:
        - upgrade

    - name: Waiting for Swarm Node to come back
      local_action: wait_for host={{ ansible_host }} state=started port=22 delay=30
      become: False
      when: reboot_required.stat.exists and drain_status is succeeded and upgrade is succeeded
      register: reconnect
      tags:
        - upgrade

    - name: Wait before Restoration
      pause: 
        prompt: "Make sure Restoration operation finishes"
        seconds: 15
      when: reconnect.changed
      tags:
        - drain

    - name: Activate CIO Node
      shell: cioctl node uncordon '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      when: drain_status.changed and cio_installed.rc == 0
      register: activate_status
      tags:
        - upgrade
        - drain

    - name: Activate Swarm Node
      shell: docker node update --availability active '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      delegate_to: "{{groups['manager'][0]}}"
      register: activate_status
      when: drain_status.changed and cio_installed.rc != 0
      tags:
        - upgrade
        - drain

    - name: Wait for Restore to finish
      pause: 
        prompt: "Make sure Restore operation finishes"
        seconds: 30
      when: drain_status.changed
      tags:
        - drain
