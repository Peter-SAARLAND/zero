# Provision Swarm
# This Playbook tries to bring the Swarm to an operational state
# It determines the current Swarm Status of each Manager/Worker
# and then bootstraps the Swarm or joins nodes if needed
#
# "manager" and "worker" are dynamic groups composed of
# HETZNER servers with labels "role: manager" and "role: worker"
# More information on this composition can be found in "hcloud.yml"
#
# 
- hosts: all
  gather_facts: False
  serial: 1
  order: reverse_sorted
  tags:
    - docker
  handlers:
    - name: drain swarm node
      shell: docker node update --availability drain '{{ hostvars[inventory_hostname]['ansible_hostname'] }}'
      #listen: "restart docker"
      notify: "restart docker"
    - name: restart docker
      service: name=docker state=restarted
      listen: "restart docker"
  tasks:
    - name: Ensure old versions of Docker are not installed.
      package:
        name:
          - docker
          - docker-engine
        state: absent
    
    - name: Ensure dependencies are installed.
      apt:
        name:
          - apt-transport-https
          - ca-certificates
        state: present
    
    - name: Add Docker apt key.
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        state: present
      register: add_repository_key
      ignore_errors: "{{ docker_apt_ignore_key_error }}"
    
    - name: Add Docker apt key (alternative for older systems without SNI).
      shell: |
        set -o pipefail
        curl -sSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      args:
        warn: false
      when: add_repository_key is failed
    
    - name: Add Docker repository.
      apt_repository:
        repo: "{{ docker_apt_repository }}"
        state: present
        update_cache: true

    - name: Install Docker.
      package:
        name: "{{ docker_package }}"
        state: "{{ docker_package_state }}"
      notify: restart docker
    
    - name: Ensure Docker is started and enabled at boot.
      service:
        name: docker
        state: "{{ docker_service_state }}"
        enabled: "{{ docker_service_enabled }}"
    
    - name: Ensure handlers are notified now to avoid firewall conflicts.
      meta: flush_handlers
    
    - name: Check current docker-compose version.
      command: docker-compose --version
      register: docker_compose_current_version
      changed_when: false
      failed_when: false
    
    - name: Delete existing docker-compose version if it's different.
      file:
        path: "{{ docker_compose_path }}"
        state: absent
      when: >
        docker_compose_current_version.stdout is defined
        and docker_compose_version not in docker_compose_current_version.stdout
    
    - name: Install Docker Compose (if configured).
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: "{{ docker_compose_path }}"
        mode: 0755
        
    - name: Ensure docker users are added to the docker group.
      user:
        name: "{{ item }}"
        groups: docker
        append: true
      with_items: "{{ docker_users }}"     
      
    - name: Copy Docker config
      template:
        src: templates/daemon.json.j2
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'
      notify: restart docker
      tags:
        - docker
        - config

    - name: Copy udev config
      template:
        src: templates/01-net-setup-link.rules.j2
        dest: /etc/udev/rules.d/01-net-setup-link.rules
        owner: root
        group: root
        mode: '0644'
      notify: restart docker
      register: udev
      tags:
        - docker
        - config

    - name: Copy systemd config
      template:
        src: templates/99-default.link.j2
        dest: /etc/systemd/network/99-default.link
        owner: root
        group: root
        mode: '0644'
      notify: restart docker
      register: systemd
      tags:
        - docker
        - config

    - name: Reload udev rules
      command: udevadm trigger
      when: udev.changed
      tags:
        - config

    - name: reload systemd
      systemd:
        daemon_reload: True
      when: systemd.changed
      tags:
        - config

    - name: Check if Loki Docker Plugin is installed
      shell: docker plugin ls
      register: loki_installed
      ignore_errors: True
      changed_when: False
      tags:
        - docker

    - name: Docker Plugins
      debug: 
        msg: "{{ loki_installed }}"
        verbosity: 1

    - name: Install Loki Docker Plugin
      command: docker plugin install  grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
      tags:
        - docker
      when: "'loki:latest' not in loki_installed.stdout"

- hosts: manager
  become: True
  gather_facts: True
  tasks:
    - name: Determine Manager Swarm Status
      shell: |
        set -o pipefail
        docker info | egrep 'Swarm: ' | cut -d ' ' -f3
      register: swarm_status
      changed_when: False
      args:
        executable: /bin/bash
    - name: Save Swarm Status
      set_fact:
        swarm: "{{ swarm_status }}"

    # Create dynamic in-memory groups "swarm_manager_active"
    # and "swarm_manager_inactive" depending on the output of `docker info`
    - name: Create swarm_manager_* Group
      group_by:
        key: swarm_manager_{{ swarm.stdout }}

- hosts: worker
  become: True
  tasks:
    - name: Determine Worker Swarm Status
      shell: |
        set -o pipefail
        docker info | egrep 'Swarm: ' | cut -d ' ' -f3
      register: swarm_status
      changed_when: False
      args:
        executable: /bin/bash
    - name: Save Worker Swarm Status
      set_fact:
        swarm: "{{ swarm_status }}"

    # Create dynamic in-memory groups "swarm_worker_active"
    # and "swarm_worker_inactive" depending on the output of `docker info` (Swarm: active/inactive)
    - name: Create swarm_worker_* Group
      group_by:
        key: swarm_worker_{{ swarm.stdout }}

- hosts: satellite
  become: True
  tasks:
    - name: Determine Satellite Swarm Status
      shell: |
        set -o pipefail
        docker info | egrep 'Swarm: ' | cut -d ' ' -f3
      register: swarm_status
      changed_when: False
      args:
        executable: /bin/bash
    - name: Save Satellite Swarm Status
      set_fact:
        swarm: "{{ swarm_status }}"

    # Create dynamic in-memory groups "swarm_worker_active"
    # and "swarm_worker_inactive" depending on the output of `docker info` (Swarm: active/inactive)
    - name: Create swarm_satellite_* Group
      group_by:
        key: swarm_satellite_{{ swarm.stdout }}

# If there are inactive Swarm Managers (i.e. not yet part of a swarm)
# check if the Swarm needs to be bootstrapped (initialized)
- hosts: swarm_manager_inactive[0]
  become: True
  tasks:
    - name: Initialize Swarm Cluster
      shell: >
        docker swarm init
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}:2377
      when: "'swarm_manager_active' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_active Group # noqa 403 503
      add_host:
        hostname: "{{ play_hosts[0] }}"
        groups: swarm_manager_active
      when: bootstrap_first_node.changed
      register: swarm_manager_active

    - name: Set Node Labels # noqa 403 503
      shell: >
        docker node update --label-add role=manager --label-add storage=cio --label-add namespace=zero {{ ansible_hostname }}
      when: swarm_manager_active.changed

# Gather Swarm related information (Join tokens)
- hosts: swarm_manager_active[0]
  become: True
  vars:
    # hostvars[ansible_hostname]['ansible_default_ipv4']['interface']
    iface: "{{ hostvars[ansible_hostname]['ansible_eth1']['device'] }}"
  tasks:
    - name: Retrieve Swarm Manager Token
      shell: docker swarm join-token -q manager # noqa 305
      register: swarm_manager_token
      changed_when: False
    - name: Retrieve Swarm Worker Token # noqa 305
      shell: docker swarm join-token -q worker
      register: swarm_worker_token
      changed_when: False
    # This list will be used to feed new nodes an IP address
    # to join the Swarm (see below)
    # - name: Populate list of Manager IPs
    #   add_host:
    #     hostname: "{{ hostvars[item.inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}"
    #     groups: swarm_manager_ips
    #   #with_items: "{{ play_hosts }}"
    #   with_items: "{{ groups['manager'] }}"
    #   changed_when: False

# Have all inactive Swarm Managers join the existing Swarm as Manager
- hosts: swarm_manager_inactive:!swarm_manager_active
  become: True
  vars:
    token: "{{ hostvars[groups['swarm_manager_active'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join Manager Nodes to Cluster # noqa 301
      # hostvars[ansible_hostname]['ansible_default_ipv4']['address']
      shell: >
        docker swarm join
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}:2377
        --token={{ token }}
        {{ hostvars[groups['manager'][0]]['ansible_eth1']['ipv4']['address'] }}:2377
    - name: Set Node Labels # noqa 301
      shell: >
        docker node update --label-add role=manager --label-add storage=cio --label-add namespace=zero {{ ansible_hostname }}

# Have all inactive Swarm Workers join the existing Swarm as Worker
- hosts: swarm_worker_inactive
  become: True
  vars:
    token: "{{ hostvars[groups['swarm_manager_active'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join Worker Nodes to Cluster # noqa 301
      shell: >
        docker swarm join
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}:2377
        --token={{ token }}
        {{ hostvars[groups['manager'][0]]['ansible_eth1']['ipv4']['address'] }}:2377

- hosts: swarm_satellite_inactive
  become: True
  vars:
    token: "{{ hostvars[groups['swarm_manager_active'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join Satellite Nodes to Cluster # noqa 301
      shell: >
        docker swarm join
        --advertise-addr={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}:2377
        --token={{ token }}
        {{ groups['manager'][0]['ansible_eth1']['ipv4']['address'] }}:2377

- hosts: swarm_manager_active[0]
  become: True
  tasks:
    - name: Set Worker Node Labels # noqa 301
      shell: >
          docker node update --label-add role=worker --label-add storage=cio {{ hostvars[item]["ansible_hostname"] }}
      with_items: "{{ groups['worker'] }}"
      when: groups["worker"] is defined and (groups["worker"]|length>0)
    - name: Set Satellite Node Labels # noqa 301
      shell: >
          docker node update --label-add role=satellite --label-add storage=local {{ hostvars[item]["ansible_hostname"] }}
      with_items: "{{ groups['satellite'] }}"
      when: groups["satellite"] is defined and (groups["satellite"]|length>0)

    - name: Create A record for Swarm
      cloudflare_dns:
        zone: "{{ base_domain }}"
        record: "swarm"
        type: A
        value: "{{ ingress_ip }}"
        account_email: "{{ cloudflare_api_email }}"
        account_api_token: "{{ cloudflare_api_key }}"
        solo: True
        proxied: False
      register: record
      when: cloudflare_enabled|bool

