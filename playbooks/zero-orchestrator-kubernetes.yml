# Provision Swarm
# This Playbook tries to bring the Swarm to an operational state
# It determines the current Swarm Status of each Manager/Worker
# and then bootstraps the Swarm or joins nodes if needed
#
# "manager" and "worker" are dynamic groups composed of
# HETZNER servers with labels "role: manager" and "role: worker"
# More information on this composition can be found in "hcloud.yml"
#
# 
- name: Engine
  hosts: all
  become: True
  gather_facts: True
  roles:
    - zero-orchestrator-kubernetes

- hosts: manager[0]
  become: True
  gather_facts: True
  tasks:
    - name: Initialize Kubernetes master with kubeadm init.
      command: >
        kubeadm init
        --pod-network-cidr={{ kubernetes_pod_cidr }}
        --apiserver-advertise-address={{ hostvars[inventory_hostname]['ansible_'+private_iface]['ipv4']['address'] }}
        --kubernetes-version {{ kubernetes_version_kubeadm }}
        --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
        {{ kubernetes_kubeadm_init_extra_opts }}
      register: kubeadmin_init
      when: not kubernetes_init_stat.stat.exists
    
    - name: Print the init output to screen.
      debug:
        var: kubeadmin_init.stdout
        verbosity: 2
      when: not kubernetes_init_stat.stat.exists
    
    - name: Ensure .kube directory exists.
      file:
        path: ~/.kube
        state: directory
    
    - name: Symlink the kubectl admin.conf to ~/.kube/conf.
      file:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        state: link
    
    - name: Configure Flannel networking.
      command: "{{ item }}"
      with_items:
        - kubectl apply -f {{ kubernetes_flannel_manifest_file_rbac }}
        - kubectl apply -f {{ kubernetes_flannel_manifest_file }}
      register: flannel_result
      changed_when: "'created' in flannel_result.stdout"
      when: kubernetes_pod_cni == 'flannel'
    
    - name: Configure Calico networking.
      command: "{{ item }}"
      with_items:
        - kubectl apply -f {{ kubernetes_calico_manifest_file }}
      register: calico_result
      changed_when: "'created' in calico_result.stdout"
      when: kubernetes_pod_cni == 'calico'
    
    - name: Get Kubernetes version for Weave installation.
      shell: kubectl version | base64 | tr -d '\n'
      changed_when: false
      register: kubectl_version
      when: kubernetes_pod_cni == 'weave'
    
    - name: Configure Weave networking.
      command: "{{ item }}"
      with_items:
        - "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}"
      register: weave_result
      changed_when: "'created' in weave_result.stdout"
      when: kubernetes_pod_cni == 'weave'
    
    # TODO: Check if taint exists with something like `kubectl describe nodes`
    # instead of using kubernetes_init_stat.stat.exists check.
    - name: Allow pods on master node (if configured).
      command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
      when:
        - kubernetes_allow_pods_on_master | bool
        - not kubernetes_init_stat.stat.exists
    
    - name: Check if Kubernetes Dashboard UI service already exists.
      shell: kubectl get services --namespace kube-system | grep -q kubernetes-dashboard
      changed_when: false
      failed_when: false
      register: kubernetes_dashboard_service
      when: kubernetes_enable_web_ui | bool
    
    - name: Enable the Kubernetes Web Dashboard UI (if configured).
      command: "kubectl create -f {{ kubernetes_web_ui_manifest_file }}"
      when:
        - kubernetes_enable_web_ui | bool
        - kubernetes_dashboard_service is failed

    - name: Get the kubeadm join command from the Kubernetes master.
      command: kubeadm token create --print-join-command
      changed_when: false
      register: kubernetes_join_command_result
    
    - name: Set the kubeadm join command globally.
      set_fact:
        kubernetes_join_command: >
          {{ kubernetes_join_command_result.stdout }}
          {{ kubernetes_join_command_extra_opts }}
      when: kubernetes_join_command_result.stdout is defined
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['all'] }}"
      
    - name: Create A record for Kubernetes
      cloudflare_dns:
        zone: "{{ base_domain }}"
        record: "k8s"
        type: A
        value: "{{ ingress_ip }}"
        account_email: "{{ cloudflare_api_email }}"
        account_api_token: "{{ cloudflare_api_key }}"
        solo: True
        proxied: False
      register: record
      when: cloudflare_enabled|bool

- hosts: all:!manager[0]
  become: True
  gather_facts: True
  tasks:
    - name: Join node to Kubernetes master
      shell: >
        {{ kubernetes_join_command }}
        creates=/etc/kubernetes/kubelet.conf
      tags: ['skip_ansible_lint']

