- name: "@apollo-infrastructure"
  hosts: localhost
  become: True
  strategy: linear
  gather_facts: false
  tasks:
    - name: loading apollo config
      block:
        - name: asserting config file exists
          stat:
            path: "{{ apollo_space_dir }}/Spacefile.yml"
          register: apollo_spacefile
          delegate_to: localhost

        - name: stopping deployment
          fail: msg="Spacefile.yml not found in {{ apollo_space_dir }}"
          when: not apollo_spacefile.stat.exists

        - name: loading startup config
          include_vars: 
            file: "/apollo/defaults.yml"
            name: startup_config

        - name: loading user config
          include_vars: 
            file: "{{ apollo_space_dir }}/Spacefile.yml"
            name: user_config

        - name: assembling running config
          set_fact:
            arc: "{{ startup_config | combine(user_config) }}"

        - name: showing running config
          debug:
            msg: "{{ arc }}"
            verbosity: 1
      tags:
        - terraform_destroy
        - terraform_apply
        - terraform_init
        - terraform_inventory
        - terraform_plan

    - name: asserting terraform command
      command: which terraform
      register: _terraform_command
      changed_when: false
      tags:
        - terraform_apply
        - terraform_destroy
        - terraform_init
        - terraform_inventory
        - terraform_plan

    - name: setting terraform facts
      set_fact:
        terraform_command: "{{ _terraform_command['stdout'] }}"
        terraform_dir: "{{ apollo_space_dir }}"
      tags:
        - terraform_apply
        - terraform_destroy
        - terraform_init
        - terraform_inventory
        - terraform_plan

    # - name: Generating Terraform Variables
    #   template:
    #     src: templates/terraform_variables.tf.j2
    #     dest: "{{ terraform_dir }}/variables.tf"
    #   tags:
    #     - terraform_apply
    #     - terraform_destroy
    #     - terraform_init
    #     - terraform_inventory
    #     - terraform_plan

    # - name: Generating Secret Terraform Variables
    #   template:
    #     src: templates/terraform.tfvars.j2
    #     dest: "{{ terraform_dir }}/terraform.tfvars"
    #   tags:
    #     - terraform_apply
    #     - terraform_destroy
    #     - terraform_init
    #     - terraform_inventory
    #     - terraform_plan

    # - name: Generating Terraform Inventory Resources
    #   template:
    #     src: templates/terraform_inventory_resources.tf.j2
    #     dest: "{{ terraform_dir }}/inventory_resources.tf"
    #   tags:
    #     - terraform_apply
    #     - terraform_destroy
    #     - terraform_init
    #     - terraform_inventory
    #     - terraform_plan

    - name: generating Terraform resources
      template:
        src: templates/apollo-infrastructure/{{ apollo_infrastructure_provider }}/main.tf.j2
        dest: "{{ terraform_dir }}/main.tf"
      tags:
        - terraform_apply
        - terraform_init
        - terraform_inventory
        - terraform_plan

    - name: generating Terraform output
      template:
        src: templates/apollo-infrastructure/{{ apollo_infrastructure_provider }}/output.tf.j2
        dest: "{{ terraform_dir }}/output.tf"
      tags:
        - terraform_apply
        - terraform_init
        - terraform_inventory
        - terraform_plan

    - name: initializing terraform modules
      command: "{{ terraform_command }} init"
      register: _terraform_init_state
      changed_when: false
      args:
        chdir: "{{ terraform_dir }}"
        #creates: "{{ terraform_dir }}/.terraform"
      tags:
        - terraform_apply
        - terraform_init
        - terraform_plan

    - name: running terraform plan
      command: "{{ terraform_command }} plan -out=terraform.plan -input=false -detailed-exitcode -state=terraform.tfstate -lock=true"
      register: _terraform_plan
      changed_when: false
      args:
        chdir: "{{ terraform_dir }}"
        #creates: "terraform.plan"
      tags:
        - terraform_apply
        - terraform_plan
      failed_when: _terraform_plan['rc'] > 2

    - name: showing terraform plan
      debug: 
        var: _terraform_plan
        verbosity: 1
      tags:
        - terraform_apply
        - terraform_plan

    - name: applying terraform plan
      command: "{{ terraform_command }} apply -compact-warnings -input=false -auto-approve=true -state=terraform.tfstate terraform.plan"
      register: _terraform_apply
      changed_when: false
      args:
        chdir: "{{ terraform_dir }}"
        #creates: "terraform.tfstate"
      tags:
        - terraform_apply
      when: >
        _terraform_plan['rc'] == 2

    - name: destroying terraform plan
      command: "{{ terraform_command }} destroy -state=terraform.tfstate -compact-warnings -auto-approve=true -force"
      register: _terraform_destroy
      changed_when: false
      args:
        chdir: "{{ terraform_dir }}"
        removes: "terraform.tfstate"
      tags:
        - terraform_destroy
      when: apollo_terraform_destroy|bool

    - name: destroying terraform artifacts
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ terraform_dir }}/terraform.tfstate"
        - "{{ terraform_dir }}/terraform.tfstate.backup"
        - "{{ terraform_dir }}/terraform.plan"
        - "{{ terraform_dir }}/Nodesfile.yml"
      tags:
        - terraform_destroy
      when: apollo_terraform_destroy|bool

    - name: asserting terraform state
      command: "{{ terraform_command }} state pull"
      register: _terraform_state
      changed_when: false
      args:
        chdir: "{{ terraform_dir }}"
      tags:
        - terraform_apply
        - terraform_destroy
        - terraform_inventory

    # - name: Generating Terraform Ansible Inventory
    #   template:
    #     src: terraform.inv.j2
    #     dest: "{{ vsphere_inventory_directory }}/terraform.inv"
    #   tags:
    #     - terraform_apply
    #     - terraform_destroy
    #     - terraform_inventory

    # - name: setting terraform inventory
    #   shell: "{{ terraform_command }} output -state=terraform.tfstate"
    #   register: _terraform_state
    #   changed_when: false
    #   args:
    #     chdir: "{{ terraform_dir }}"
    #     #creates: "{{ apollo_space_dir}}/Nodesfile.yml"
    #   tags:
    #     - terraform_apply
    #     - terraform_destroy
    #     - terraform_inventory
