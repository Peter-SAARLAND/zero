- name: "facts"
  hosts: all
  gather_facts: False
  become: true
  tasks:
    - name: loading apollo config
      block:
        - name: showing arc
          debug:
            msg: "{{ vars }}"
            verbosity: 1

        # - name: asserting config file exists
        #   stat:
        #     path: "{{ apollo_space_dir }}/Spacefile.yml"
        #   register: apollo_spacefile
        #   delegate_to: apollo

        # - name: stopping deployment
        #   fail: msg="Spacefile.yml not found in {{ apollo_space_dir }}"
        #   when: not apollo_spacefile.stat.exists

        # - name: loading startup config
        #   include_vars: 
        #     file: "/apollo/defaults.yml"
        #     name: startup_config

        # - name: loading user config
        #   include_vars: 
        #     file: "{{ apollo_space_dir }}/Spacefile.yml"
        #     name: user_config

        # - name: assembling running config
        #   set_fact:
        #     arc: "{{ startup_config | combine(user_config) }}"

        # - name: showing running config
        #   debug:
        #     msg: "{{ arc }}"
        #     verbosity: 1

        # - name: "setting runtime facts: space.base_domain"
        #   set_fact:
        #     arc: "{{ arc|combine({'space': {'base_domain': apollo_management_ip+'.xip.io' }}, recursive=True) }}"
        #   when:
        #     (arc['space']['base_domain'] is not defined)

        # - name: "setting runtime facts: space.ingress_ip"
        #   set_fact:
        #     arc: "{{ arc|combine({'space': {'ingress_ip': apollo_ingress_ip }}, recursive=True) }}"
        #   when:
        #     (arc['space']['ingress_ip'] is not defined)

        # - name: "setting runtime facts: space.management_ip"
        #   set_fact:
        #     arc: "{{ arc|combine({'space': {'management_ip': apollo_management_ip }}, recursive=True) }}"
        #   when:
        #     (arc['space']['management_ip'] is not defined)

        # - name: "setting runtime facts: space.space_domain"
        #   set_fact:
        #     arc: "{{ arc|combine({'space': {'space_domain': arc['space']['name'] + '.' + arc['space']['base_domain'] }}, recursive=True) }}"
        #   when:
        #     (arc['space']['space_domain'] is not defined)


            #gitlab_runner_registration_token: "{{ gitlab.runner.token }}"
            #nfs_source: "{{ hostvars[lookup('env','APOLLO_DATA_NFS_SOURCE')] | default('', true) }}"        
    # - name: loading apollo infrastructure
    #   block:
    #     - name: asserting config file exists
    #       stat:
    #         path: "{{ apollo_space_dir }}/Nodesfile.yml"
    #       register: apollo_nodesfile
    #       delegate_to: localhost

    #     - name: asserting infrastructure
    #       block:
    #         - name: asserting infrastructure should be deployed
    #           debug:
    #             msg: "invoking Terraform"


    #       when: 
    #         - not apollo_nodesfile.stat.exists
    #         - arc['infrastructure']['enabled']|bool
        
    #     - name: asserting config file exists
    #       stat:
    #         path: "{{ apollo_space_dir }}/Nodesfile.yml"
    #       register: apollo_nodesfile
    #       delegate_to: localhost

    #     # - name: asserting Nodesfile.yml exists
    #     #   fail: msg="Nodesfile.yml not found in {{ apollo_space_dir }}"
    #     #   when: not apollo_nodesfile.stat.exists
    #     #   delegate_to: localhost
  
- name: "node facts"
  hosts: 
    - cluster
  gather_facts: False
  strategy: linear
  become: true
  tasks:
    - name: asserting node facts
      block:
        - name: asserting nodes are up
          wait_for_connection:

        - name: asserting facts.d directory is removed
          file:
            path: "/etc/ansible/facts.d"
            state: absent

        - name: setting node facts
          setup:
            filter: "*"

        - name: setting apollo facts
          set_fact:
            apollo_manager: "{{  hostvars[groups['manager'][0]]['ansible_default_ipv4']['address'] }}"
            cluster_ip: "{{  hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            apollo_public_ip: "{{  hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            apollo_public_interface: "{{  hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
            apollo_private_interface: "{{  hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"

        - name: updating apollo facts | wireguard
          set_fact:  
            apollo_manager: "{{ hostvars[groups['manager'][0]]['apollo_cluster_ip'] }}"
            cluster_ip: "{{  hostvars[inventory_hostname]['apollo_cluster_ip'] }}"
          when: 
            - arc['cluster']['encryption']['enabled']|bool
            - arc['cluster']['encryption']['provider'] == "wireguard"

        # - name: asserting facts.d directory exists
        #   file:
        #     path: "/etc/ansible/facts.d"
        #     state: directory
        #     mode: '0755'

        # - name: setting local facts
        #   copy:
        #     dest: "/etc/ansible/facts.d/apollo.fact"
        #     content: |
        #       [apollo]
        #       space={{ apollo_space }}
        #       space_version={{ apollo_space_version }}  
        #     backup: false
        #     owner: root
        #     group: root
        #     mode: 0755

        
        
          #when: apollo_space_version | version_compare('2.0.0', '<') 