stages:
  - fetch-version
  - build
  - test
  - release
  - deploy
    
cache:
  key: "$CI_JOB_NAME"
  
variables:
  DOCKER_TLS_CERTDIR: ""

fetch-semantic-version:
  # Requires Node >= 10.13 version
  image: node:13
  stage: fetch-version
  only:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec @semantic-release/changelog
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt

generate-non-semantic-version:
  stage: fetch-version
  except:
    refs:
    - master
    - alpha
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - echo build-$CI_PIPELINE_ID > VERSION.txt
  artifacts:
    paths:
    - VERSION.txt

Build node-exporter:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node-exporter:latest || true
    - cd docker/node-exporter
    - docker build --cache-from $CI_REGISTRY_IMAGE/node-exporter:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/node-exporter:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/node-exporter:$CI_COMMIT_SHORT_SHA
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/node-exporter/**
      when: manual

Build prometheus:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/prometheus:latest || true
    - cd docker/prometheus
    - docker build --cache-from $CI_REGISTRY_IMAGE/prometheus:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/prometheus:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/prometheus:$CI_COMMIT_SHORT_SHA
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/prometheus/**
      when: manual

Build alertmanager:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/alertmanager:latest || true
    - cd docker/alertmanager
    - docker build --cache-from $CI_REGISTRY_IMAGE/alertmanager:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/alertmanager:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/alertmanager:$CI_COMMIT_SHORT_SHA
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/alertmanager/**
      when: manual

Build grafana:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/grafana:latest || true
    - cd docker/grafana
    - docker build --cache-from $CI_REGISTRY_IMAGE/grafana:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/grafana:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/grafana:$CI_COMMIT_SHORT_SHA
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/grafana/**
      when: manual

# Build loki:
#   stage: build
#   image: docker:19.03.5
#   variables:
#     DOCKER_BUILDKIT: 1 
#   services:
#     - docker:19.03.5-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker pull $CI_REGISTRY_IMAGE/loki:latest || true
#     - cd docker/loki
#     - docker build --cache-from $CI_REGISTRY_IMAGE/loki:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/loki:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_REGISTRY_IMAGE/loki:$CI_COMMIT_SHORT_SHA
#   tags: 
#     - build

Build zero:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
    # For Container Scanning
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  services:
    - docker:19.03.5-dind
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY --username=gitlab-ci-token --password-stdin
    - export BASE_IMAGE=$(grep -oE 'FROM .+$' docker/zero/Dockerfile | head -n 1 | cut -d ' ' -f 2)
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker pull $BASE_IMAGE
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest,$BASE_IMAGE --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $IMAGE_TAG -f docker/zero/Dockerfile .
    - docker push $IMAGE_TAG

# include:
#   - template: Container-Scanning.gitlab-ci.yml

# include:
#   - template: License-Scanning.gitlab-ci.yml
  
# include:
#   - template: Dependency-Scanning.gitlab-ci.yml

# include:
#   - template: SAST.gitlab-ci.yml
  
    
# # Lint Ansible files
# test:ansible:
#   stage: test
#   image: $CONTAINER_TEST_IMAGE
#   script:
#     - ansible-lint --version
#     - cd ansible
#     - echo 'Ansible refuses to read from a world-writeable folder, hence' && chmod -v 700 $(pwd)
#     - ansible-lint *.yml
#   allow_failure: true
#   tags: 
#     

Release prometheus:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/prometheus:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/prometheus:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/prometheus:latest
    - docker push $CI_REGISTRY_IMAGE/prometheus:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/prometheus:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/prometheus:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/prometheus:v$(cat VERSION.txt)
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/prometheus/**
      when: manual
    

Release alertmanager:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/alertmanager:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/alertmanager:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/alertmanager:latest
    - docker push $CI_REGISTRY_IMAGE/alertmanager:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/alertmanager:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/alertmanager:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/alertmanager:v$(cat VERSION.txt)
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/alertmanager/**
      when: manual    

Release grafana:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/grafana:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/grafana:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/grafana:latest
    - docker push $CI_REGISTRY_IMAGE/grafana:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/grafana:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/grafana:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/grafana:v$(cat VERSION.txt)
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/grafana/**
      when: manual

Release node-exporter:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/node-exporter:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/node-exporter:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/node-exporter:latest
    - docker push $CI_REGISTRY_IMAGE/node-exporter:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/node-exporter:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/node-exporter:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE/node-exporter:v$(cat VERSION.txt)
  rules:
    - changes: # Will include the job and set to when:manual if any of the follow paths match a modified file.
      - docker/node-exporter/**
      when: manual

# Release loki:
#   stage: release
#   image: docker:19.03.5
#   services:
#     - docker:19.03.5-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker pull $CI_REGISTRY_IMAGE/loki:$CI_COMMIT_SHORT_SHA || true
#     - docker tag $CI_REGISTRY_IMAGE/loki:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/loki:latest
#     - docker push $CI_REGISTRY_IMAGE/loki:latest
#     - docker tag $CI_REGISTRY_IMAGE/loki:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/loki:v$RELEASE_VERSION
#     - docker push $CI_REGISTRY_IMAGE/loki:v$RELEASE_VERSION
#   only:
#     - master
#   tags: 
#     - build

Release zero:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:v$(cat VERSION.txt)
    - docker push $CI_REGISTRY_IMAGE:v$(cat VERSION.txt)
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success

release:
  image: node:13
  stage: release
  only:
    refs:
    - master
    - alpha
    # This matches maintenance branches
    - /^(([0-9]+)\.)?([0-9]+)\.x/
    # This matches pre-releases
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
  script:
    - touch CHANGELOG.md
    - npm install @semantic-release/gitlab @semantic-release/changelog @semantic-release/exec
    - npx semantic-release
  artifacts:
    paths:
    - CHANGELOG.md