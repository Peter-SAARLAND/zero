# Stages
stages:
  - lint
  - test
  - version
  - build
  - release
  - deploy


# Do not use "latest" here as it makes rollbacks and
# error tracking harder
#image: docker:19.03.2
image: tiangolo/docker-with-compose

#services:
  #- docker:dind

# enable per-job and per-branch caching
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  
variables:
  DOCKER_DRIVER: overlay2
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest


.deployment: &deployment |
  # Setup SSH deploy keys
  which ssh-agent || ( apk add --no-cache openssh-client )
  eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  docker -H ssh://${SWARM_USER}@${SWARM_HOST} login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  docker -H ssh://${SWARM_USER}@${SWARM_HOST} stack deploy --with-registry-auth --prune -c ci/docker-stack.yml $DEPLOYMENT


before_script:
  # Source Environment Variables from .env
  - export $(grep -v '^#' .env | xargs)

# Lint Ansible files
# ansible:
#   stage: lint
#   image: yokogawa/ansible-lint
#   script:
#     - sh -c 'ansible-lint --force-color *.yml'

# Build
# build:
#   stage: build
#   script:
#     - docker pull $CONTAINER_RELEASE_IMAGE || true
#     - docker build --cache-from $CONTAINER_RELEASE_IMAGE $CONTAINER_TEST_IMAGE .
#     - docker push $CONTAINER_TEST_IMAGE

# # Release
# release-image:
#   stage: release
#   script:
#     - docker pull $CONTAINER_TEST_IMAGE || true
#     - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
#     - docker push $CONTAINER_RELEASE_IMAGE
#   only:
#     - master

# Testing Infrastructure Stack
test:
  stage: test
  image: tiangolo/docker-with-compose
  script:
    - docker-compose -f ci/docker-stack.yml config --quiet
    #- docker-compose run -e INSIDE_CI=1 web sh ./docker/ci.sh
  coverage: '/[\d\.]+\%\s*$/'
  only:
    - master

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release test-git || true
    - release test-api
    - release next-version --allow-current > .next-version
  artifacts:
    paths:
    - .next-version
  except:
    - tags

build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
    - build_info

release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - rm -f release_info
    - mv build_info release_info
    - . release_info
    - release -v
    - release changelog 
    - release commit-and-tag CHANGELOG.md release_info
  only:
    - master
  #- release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_URL -d "$RELEASE_DESC"


# release:
#   stage: release
#   image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
#   script:
#   - rm -f release_info
#   - mv build_info release_info
#   - . release_info
  
#   - cp release docker
#   - cp /etc/ssl/certs/ca-certificates.crt docker
#   - cd docker
#   - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#   - docker build -t $CI_REGISTRY_IMAGE:v$RELEASE_VERSION .
#   - docker push $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
#   - cd ..

#   - ./release -v
#   - ./release changelog
#   - ./release commit-and-tag CHANGELOG.md release_info
#   - ./release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_URL -d "$RELEASE_DESC"
#   when: manual
#   only:
#   - master


# Deploy: Staging
deploy:
  stage: deploy
  variables:
    ENVIRONMENT_DOMAIN: $CI_ENVIRONMENT_NAME.$BASE_DOMAIN
    RELEASE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    DEPLOYMENT: ${CI_PROJECT_NAME}
  script:
    - *deployment 
  only:
    - master
  when: manual

# # Deploy: Production
# production:
#   stage: deploy
#   image: alpine
#   #script:
#   #  - apk add --update curl
#   #  - curl -XPOST $WWW_WEBHOOK
#   only:
#     - master
#   environment:
#     name: production

# Testing application:
# test:
#   stage: test
#   script:
#     - docker-compose -f docker-compose.yml -f docker/docker-compose.prod.yml config --quiet
#     #- docker-compose run -e INSIDE_CI=1 web sh ./docker/ci.sh
#   coverage: '/[\d\.]+\%\s*$/'
#   artifacts:
#     paths:
#       - artifacts/