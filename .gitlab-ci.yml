# Stages
stages:
  - version
  - build
  - test
  - release
  - deploy

# Do not use "latest" here as it makes rollbacks and
# error tracking harder
#image: docker:19.03.2

# enable per-job and per-branch caching
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

.deployment: &deployment |
  # Setup SSH deploy keys
  which ssh-agent || ( apk add --no-cache openssh-client )
  eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  docker -H ssh://${SWARM_USER}@${SWARM_HOST} login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  docker -H ssh://${SWARM_USER}@${SWARM_HOST} stack deploy --with-registry-auth --prune -c ci/docker-stack.yml $DEPLOYMENT


before_script:
  # Source Environment Variables from .env
  - export $(grep -v '^#' .env | xargs)

version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release test-git || true
    - release test-api
    - release next-version --allow-current
    - release next-version --allow-current > .next-version
    - echo "RELEASE_URL=$CI_PROJECT_URL/-/tags/v$(<.next-version)" > build_info
    - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
    - echo "RELEASE_SHA=$CI_COMMIT_SHORT_SHA" >> build_info
    - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
    - .next-version
    - build_info
  except:
    - tags
  tags: 
    - infrastructure

Build node-exporter:
  stage: build
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node-exporter:latest || true
    - cd docker/node-exporter
    - docker build --cache-from $CI_REGISTRY_IMAGE/node-exporter:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/node-exporter:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/node-exporter:$CI_COMMIT_SHORT_SHA
  tags: 
    - build
    - infrastructure
  #when: manual

Build prometheus:
  stage: build
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/prometheus:latest || true
    - cd docker/prometheus
    - docker build --cache-from $CI_REGISTRY_IMAGE/prometheus:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/prometheus:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/prometheus:$CI_COMMIT_SHORT_SHA
  tags: 
    - build
  #when: manual

Build grafana:
  stage: build
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/grafana:latest || true
    - cd docker/grafana
    - docker build --cache-from $CI_REGISTRY_IMAGE/grafana:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE/grafana:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/grafana:$CI_COMMIT_SHORT_SHA
  tags: 
    - build
    - infrastructure
  #when: manual

Build infrastructure:
  stage: build
  image: docker:19.03.5
  variables:
    DOCKER_BUILDKIT: 1 
  services:
    - docker:19.03.5-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f docker/infrastructure/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  tags: 
    - infrastructure
    - build

# # Lint Ansible files
# test:ansible:
#   stage: test
#   image: $CONTAINER_TEST_IMAGE
#   script:
#     - ansible-lint --version
#     - cd ansible
#     - echo 'Ansible refuses to read from a world-writeable folder, hence' && chmod -v 700 $(pwd)
#     - ansible-lint *.yml
#   allow_failure: true
#   tags: 
#     - infrastructure

Release prometheus:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/prometheus:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/prometheus:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/prometheus:latest
    - docker push $CI_REGISTRY_IMAGE/prometheus:latest
    - docker tag $CI_REGISTRY_IMAGE/prometheus:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/prometheus:v$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE/prometheus:v$RELEASE_VERSION
  only:
    - master
  tags: 
    - build
    - infrastructure
  #when: manual

Release grafana:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/grafana:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/grafana:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/grafana:latest
    - docker push $CI_REGISTRY_IMAGE/grafana:latest
    - docker tag $CI_REGISTRY_IMAGE/grafana:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/grafana:v$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE/grafana:v$RELEASE_VERSION
  only:
    - master
  tags: 
    - build
    - infrastructure
  #when: manual

Release node-exporter:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/node-exporter:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE/node-exporter:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/node-exporter:latest
    - docker push $CI_REGISTRY_IMAGE/node-exporter:latest
    - docker tag $CI_REGISTRY_IMAGE/node-exporter:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/node-exporter:v$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE/node-exporter:v$RELEASE_VERSION
  only:
    - master
  tags: 
    - build
    - infrastructure
  #when: manual

Release infrastructure:
  stage: release
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  script:
    - . build_info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA || true
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
    - docker push $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
  only:
    - master
  tags: 
    - build
    - infrastructure

release:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - rm -f release_info
    - mv build_info release_info
    - . release_info
    - release changelog 
    - release commit-and-tag CHANGELOG.md release_info
  only:
    - master
  tags: 
    - infrastructure
    - docker


# release:
#   stage: release
#   image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
#   script:
#   - rm -f release_info
#   - mv build_info release_info
#   - . release_info
  
#   - cp release docker
#   - cp /etc/ssl/certs/ca-certificates.crt docker
#   - cd docker
#   - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#   - docker build -t $CI_REGISTRY_IMAGE:v$RELEASE_VERSION .
#   - docker push $CI_REGISTRY_IMAGE:v$RELEASE_VERSION
#   - cd ..

#   - ./release -v
#   - ./release changelog
#   - ./release commit-and-tag CHANGELOG.md release_info
#   - ./release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_URL -d "$RELEASE_DESC"
#   when: manual
#   only:
#   - master

deploy:
  stage: deploy
  script:
    - docker info
  tags:
    - deploy